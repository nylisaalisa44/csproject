import { Bot } from '../models/Bot';
import { IBotDocument } from '../types';
import { BotService } from './BotService';
import { ItemSyncService } from './ItemSyncService';

export class BotSyncService {
  private botService: BotService;
  private itemSyncService: ItemSyncService;
  private syncInterval: NodeJS.Timeout | null = null;
  private tradeProcessingInterval: NodeJS.Timeout | null = null;
  private cleanupInterval: NodeJS.Timeout | null = null;
  private isRunning = false;
  private isPollingEnabled = false;

  constructor() {
    this.botService = new BotService();
    this.itemSyncService = new ItemSyncService();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  startAutoSync(options: {
    syncIntervalMs?: number; // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç)
    tradeProcessingIntervalMs?: number; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–π–¥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
    cleanupIntervalMs?: number; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç—Ä–µ–π–¥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç)
  } = {}) {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Bot sync service is already running');
      return;
    }

    const {
      syncIntervalMs = 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
      tradeProcessingIntervalMs = 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
      cleanupIntervalMs = 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç
    } = options;

    console.log('üöÄ Starting bot sync service...');
    console.log(`üìÖ Sync interval: ${syncIntervalMs / 1000}s`);
    console.log(`üîÑ Trade processing interval: ${tradeProcessingIntervalMs / 1000}s`);
    console.log(`üßπ Cleanup interval: ${cleanupIntervalMs / 1000}s`);

    this.isRunning = true;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ SteamTradeManagerService
    this.initializeSteamManager();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    this.syncInterval = setInterval(async () => {
      try {
        console.log('üîÑ Starting scheduled inventory sync...');
        await this.botService.syncAllBotInventories();
      } catch (error) {
        console.error('‚ùå Error during scheduled inventory sync:', error);
      }
    }, syncIntervalMs);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–µ–π–¥–æ–≤
    this.tradeProcessingInterval = setInterval(async () => {
      try {
        console.log('üîÑ Starting scheduled trade processing...');
        await this.botService.processAllBotIncomingTrades();
      } catch (error) {
        console.error('‚ùå Error during scheduled trade processing:', error);
      }
    }, tradeProcessingIntervalMs);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö —Ç—Ä–µ–π–¥–æ–≤
    this.cleanupInterval = setInterval(async () => {
      try {
        console.log('üßπ Starting scheduled trade cleanup...');
        await this.cleanupExpiredTrades();
      } catch (error) {
        console.error('‚ùå Error during scheduled trade cleanup:', error);
      }
    }, cleanupIntervalMs);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É
    this.performInitialSync();

    console.log('‚úÖ Bot sync service started successfully');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  stopAutoSync() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è Bot sync service is not running');
      return;
    }

    console.log('üõë Stopping bot sync service...');

    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }

    if (this.tradeProcessingInterval) {
      clearInterval(this.tradeProcessingInterval);
      this.tradeProcessingInterval = null;
    }

    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = null;
    }

    this.isRunning = false;
    console.log('‚úÖ Bot sync service stopped');
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  private async performInitialSync() {
    try {
      console.log('üöÄ Performing initial bot sync...');
      
      // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–æ–≤
      await this.cleanupInvalidBotStates();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤ –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏–∏
      const bots = await Bot.find({ isActive: true });
      console.log(`üìä Found ${bots.length} active bots`);
      
      let loggedInBots = 0;
      let botsNeeding2FA = 0;
      let sessionRestored = 0;
      
      for (const bot of bots) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
          if (bot.steamSessionId && bot.steamLoginSecure) {
            console.log(`üîÑ Attempting to restore session for bot ${bot.displayName}...`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
            const restored = await this.botService.restoreBotSession(bot);
            if (restored) {
              console.log(`‚úÖ Session restored for bot ${bot.displayName}`);
              loggedInBots++;
              sessionRestored++;
            } else {
              console.log(`‚ùå Failed to restore session for bot ${bot.displayName}`);
              // –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              bot.isOnline = false;
              bot.lastActivity = new Date();
              bot.syncStatus = 'error';
              await bot.save();
              console.log(`üî¥ Bot ${bot.displayName} marked as offline due to auth failure`);
              
              if (bot.steamGuardCode) {
                console.log(`üí° Bot ${bot.displayName} has 2FA code - can be logged in via admin panel`);
                botsNeeding2FA++;
              } else {
                console.log(`üí° Bot ${bot.displayName} needs 2FA code - please login via admin panel`);
                botsNeeding2FA++;
              }
            }
          } else {
            console.log(`‚ö†Ô∏è Bot ${bot.displayName} has no saved session`);
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            bot.isOnline = false;
            bot.lastActivity = new Date();
            bot.syncStatus = 'error';
            await bot.save();
            console.log(`üî¥ Bot ${bot.displayName} marked as offline - no saved session`);
            
            if (bot.steamGuardCode) {
              console.log(`üí° Bot ${bot.displayName} has 2FA code - can be logged in via admin panel`);
              botsNeeding2FA++;
            } else {
              console.log(`üí° Bot ${bot.displayName} needs 2FA code - please login via admin panel`);
              botsNeeding2FA++;
            }
          }
        } catch (error) {
          console.error(`‚ùå Error checking bot ${bot.displayName}:`, error);
          // –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
          bot.isOnline = false;
          bot.lastActivity = new Date();
          bot.syncStatus = 'error';
          await bot.save();
          console.log(`üî¥ Bot ${bot.displayName} marked as offline due to error`);
        }
      }
      
      console.log(`üìä Bot status: ${loggedInBots} logged in (${sessionRestored} restored), ${botsNeeding2FA} need 2FA login`);
      
      if (loggedInBots > 0) {
        console.log(`üí° ${loggedInBots} bots are ready for sync`);
      } else {
        console.log(`üí° No bots are logged in. Please login via admin panel`);
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–π–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤)
      const tradeResult = await this.botService.processAllBotIncomingTrades();
      console.log('üìä Initial trade processing result:', tradeResult);

      // –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ç—Ä–µ–π–¥—ã
      const cleanupResult = await this.cleanupExpiredTrades();
      console.log('üìä Initial cleanup result:', cleanupResult);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –±–æ—Ç–æ–≤ —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      console.log('üîÑ Starting items sync to global inventory...');
      const itemsSyncResult = await this.itemSyncService.syncBotItemsToGlobalInventory();
      console.log('üìä Items sync result:', itemsSyncResult);

      console.log('‚úÖ Initial bot sync completed');
    } catch (error) {
      console.error('‚ùå Error during initial bot sync:', error);
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
   */
  async forceSyncAllBots(): Promise<{
    syncResult: any;
    tradeResult: any;
    cleanupResult: any;
  }> {
    console.log('üîÑ Force syncing all bots...');

    const syncResult = await this.botService.syncAllBotInventories();
    const tradeResult = await this.botService.processAllBotIncomingTrades();
    const cleanupResult = await this.cleanupExpiredTrades();

    console.log('‚úÖ Force sync completed');
    return { syncResult, tradeResult, cleanupResult };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
   */
  async forceSyncBot(botId: string): Promise<{
    syncResult: any;
    tradeResult: any;
  }> {
    console.log(`üîÑ Force syncing bot ${botId}...`);

    // –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞ –ø–æ ID
    const bot = await Bot.findById(botId);
    if (!bot) {
      throw new Error(`Bot with ID ${botId} not found`);
    }

    const syncResult = await this.botService.syncBotInventory((bot._id as any).toString());
    const tradeResult = await this.botService.processBotIncomingTrades(botId);

    console.log(`‚úÖ Force sync for bot ${botId} completed`);
    return { syncResult, tradeResult };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç—Ä–µ–π–¥–æ–≤
   */
  private async cleanupExpiredTrades(): Promise<{ cleaned: number }> {
    try {
      const bots = await Bot.find({ isActive: true });
      let cleaned = 0;

      for (const bot of bots) {
        // –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–π–¥—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
        const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
        const expiredTrades = bot.activeTrades.filter(trade => 
          new Date(trade.expiresAt) < sevenDaysAgo
        );

        if (expiredTrades.length > 0) {
          bot.activeTrades = bot.activeTrades.filter(trade => 
            new Date(trade.expiresAt) >= sevenDaysAgo
          );
          await bot.save();
          cleaned += expiredTrades.length;
        }
      }

      console.log(`üßπ Cleaned up ${cleaned} expired trades`);
      return { cleaned };
    } catch (error) {
      console.error('‚ùå Error cleaning up expired trades:', error);
      return { cleaned: 0 };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–æ–≤
   */
  private async cleanupInvalidBotStates() {
    try {
      console.log('üßπ Cleaning up invalid bot states...');
      const bots = await Bot.find({ isActive: true });
      let cleaned = 0;

      for (const bot of bots) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –∏–ª–∏ –∏–º–µ–µ—Ç –æ—à–∏–±–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if (!bot.isActive || bot.syncStatus === 'error') {
          console.log(`üßπ Bot ${bot.displayName} (ID: ${bot._id}) is invalid. Attempting to restore.`);
          try {
            // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
            const restored = await this.botService.restoreBotSession(bot);
            if (restored) {
              console.log(`‚úÖ Session restored for bot ${bot.displayName}`);
              bot.syncStatus = 'syncing'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
              bot.lastSync = new Date(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
              bot.lastActivity = new Date(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
              await bot.save();
              cleaned++;
            } else {
              console.log(`‚ùå Failed to restore session for bot ${bot.displayName}. Marking as inactive.`);
              bot.isActive = false; // –û—Ç–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
              bot.syncStatus = 'error'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
              bot.lastSync = new Date(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
              bot.lastActivity = new Date(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
              await bot.save();
              cleaned++;
            }
          } catch (error) {
            console.error(`‚ùå Error restoring session for bot ${bot.displayName}:`, error);
            bot.isActive = false; // –û—Ç–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
            bot.syncStatus = 'error'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
            bot.lastSync = new Date(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            bot.lastActivity = new Date(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await bot.save();
            cleaned++;
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–æ–≤ –±–µ–∑ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (bot.isOnline && (!bot.steamSessionId || !bot.steamLoginSecure)) {
          console.log(`üßπ Bot ${bot.displayName} is marked as online but has no session data. Resetting status.`);
          bot.isOnline = false;
          bot.lastLoginError = 'Session data missing - needs re-login';
          bot.lastLoginErrorTime = new Date();
          await bot.save();
          cleaned++;
        }
      }
      console.log(`üßπ Cleaned up ${cleaned} invalid bot states.`);
    } catch (error) {
      console.error('‚ùå Error cleaning up invalid bot states:', error);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SteamTradeManagerService
   */
  private async initializeSteamManager() {
    try {
      console.log('üîÑ Initializing SteamTradeManagerService...');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      console.log('‚úÖ SteamTradeManagerService initialized');
    } catch (error) {
      console.error('‚ùå Error initializing SteamTradeManagerService:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  getStatus(): {
    isRunning: boolean;
    hasSyncInterval: boolean;
    hasTradeProcessingInterval: boolean;
    hasCleanupInterval: boolean;
  } {
    return {
      isRunning: this.isRunning,
      hasSyncInterval: this.syncInterval !== null,
      hasTradeProcessingInterval: this.tradeProcessingInterval !== null,
      hasCleanupInterval: this.cleanupInterval !== null
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤
   */
  async getBotStats() {
    return await this.botService.getBotStats();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–æ–≤
   */
  async getBotHealthStatus(): Promise<{
    totalBots: number;
    healthyBots: number;
    problematicBots: number;
    offlineBots: number;
    botsWithErrors: number;
    pollingEnabled: boolean;
    details: Array<{
      botId: string;
      displayName: string;
      steamId: string;
      status: 'healthy' | 'offline' | 'error' | 'syncing';
      lastSync: Date | undefined;
      lastActivity: Date | undefined;
      inventoryCount: number;
      activeTradesCount: number;
      issues: string[];
    }>;
  }> {
    const bots = await Bot.find({});
    const now = new Date();
    const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);
    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);

    let healthyBots = 0;
    let problematicBots = 0;
    let offlineBots = 0;
    let botsWithErrors = 0;

    const details = bots.map(bot => {
      const issues: string[] = [];
      let status: 'healthy' | 'offline' | 'error' | 'syncing' = 'healthy';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
      if (!bot.isOnline) {
        status = 'offline';
        issues.push('Bot is offline');
        offlineBots++;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      if (bot.syncStatus === 'error') {
        status = 'error';
        issues.push('Sync error');
        botsWithErrors++;
      } else if (bot.syncStatus === 'syncing') {
        status = 'syncing';
        issues.push('Currently syncing');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (bot.lastActivity && bot.lastActivity < oneHourAgo) {
        issues.push('No recent activity');
        // –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ offline, –µ—Å–ª–∏ –±–æ—Ç –æ–Ω–ª–∞–π–Ω
        // –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      if (bot.lastSync && bot.lastSync < fiveMinutesAgo) {
        issues.push('Outdated inventory');
        if (status === 'healthy') {
          status = 'error';
          botsWithErrors++;
        }
      }

      // –ï—Å–ª–∏ –±–æ—Ç –æ–Ω–ª–∞–π–Ω, –Ω–æ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ problematic
      if (bot.isOnline && bot.syncStatus === 'error') {
        if (status === 'healthy') {
          status = 'error';
          botsWithErrors++;
        }
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (status === 'healthy') {
        healthyBots++;
      } else if (status === 'offline') {
        offlineBots++;
      } else if (status === 'error') {
        botsWithErrors++;
      } else if (status === 'syncing') {
        problematicBots++;
      }

      return {
        botId: (bot._id as any).toString(),
        displayName: bot.displayName,
        steamId: bot.steamId,
        status,
        lastSync: bot.lastSync,
        lastActivity: bot.lastActivity,
        inventoryCount: bot.inventory.length,
        activeTradesCount: bot.activeTradesCount,
        issues
      };
    });

    return {
      totalBots: bots.length,
      healthyBots,
      problematicBots,
      offlineBots,
      botsWithErrors,
      pollingEnabled: this.getPollingStatus(),
      details
    };
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
   */
  restart() {
    console.log('üîÑ Restarting bot sync service...');
    this.stopAutoSync();
    setTimeout(() => {
      this.startAutoSync();
    }, 1000);
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ polling –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
   */
  enablePolling() {
    if (this.isPollingEnabled) {
      console.log('‚ö†Ô∏è Polling is already enabled');
      return;
    }
    
    console.log('üîÑ Enabling polling for all bots...');
    this.isPollingEnabled = true;
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ polling —É –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
    // –ü–æ–∫–∞ —á—Ç–æ polling —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ TradeOfferManager
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ polling –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
   */
  disablePolling() {
    if (!this.isPollingEnabled) {
      console.log('‚ö†Ô∏è Polling is already disabled');
      return;
    }
    
    console.log('‚èπÔ∏è Disabling polling for all bots...');
    this.isPollingEnabled = false;
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling —É –≤—Å–µ—Ö –±–æ—Ç–æ–≤
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ polling
   */
  getPollingStatus(): boolean {
    return this.isPollingEnabled;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const botSyncService = new BotSyncService();
