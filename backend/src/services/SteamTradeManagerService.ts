import SteamUser from 'steam-user';
import SteamCommunity from 'steamcommunity';
import TradeOfferManager from 'steam-tradeoffer-manager';
import { IBotDocument } from '../types';
import { SteamTradeOffer, SteamInventoryItem, TradeOfferManagerOptions, InventorySyncResult, TradeProcessingResult } from '../types/steam-types';

export class SteamTradeManagerService {
  private steamUser: SteamUser;
  private steamCommunity: SteamCommunity;
  private tradeOfferManager: TradeOfferManager;
  private isLoggedIn: boolean = false;
  private isLoggingIn: boolean = false;
  private isPolling: boolean = false;

  constructor() {
    this.steamUser = new SteamUser();
    this.steamCommunity = new SteamCommunity();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TradeOfferManager —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º polling
    this.tradeOfferManager = new TradeOfferManager({
      steam: this.steamUser,
      community: this.steamCommunity,
      domain: 'localhost', // –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
      language: 'english',
      pollInterval: 0, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π polling
      minimumPollInterval: 0, // –û—Ç–∫–ª—é—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      cancelTime: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
      pendingCancelTime: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω–µ–π
      cancelOfferCount: 5, // –ú–∞–∫—Å–∏–º—É–º 5 –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤
      cancelOfferCountMinAge: 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
    });

    this.setupEventHandlers();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async initializeState(): Promise<void> {
    try {
      console.log('üîÑ Initializing SteamTradeManagerService state...');
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
      this.isLoggedIn = false;
      this.isLoggingIn = false;
      
      console.log('‚úÖ SteamTradeManagerService state initialized');
    } catch (error) {
      console.error('‚ùå Error initializing SteamTradeManagerService state:', error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ SteamUser –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.steamUser.on('disconnected', () => {
      console.log('‚ö†Ô∏è Steam user disconnected');
      this.isLoggedIn = false;
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è TradeOfferManager
    this.setupTradeOfferManagerHandlers();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π TradeOfferManager
   */
  private setupTradeOfferManagerHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ TradeOfferManager —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    this.tradeOfferManager.on('sentOfferChanged', (offer: any, oldState: any) => {
      console.log(`üì§ Sent offer ${offer.id} changed from ${oldState} to ${offer.state}`);
    });

    this.tradeOfferManager.on('receivedOfferChanged', (offer: any, oldState: any) => {
      console.log(`üì• Received offer ${offer.id} changed from ${oldState} to ${offer.state}`);
    });

    this.tradeOfferManager.on('newOffer', (offer: any) => {
      console.log(`üéÅ New trade offer received: ${offer.id}`);
      this.handleNewOffer(offer);
    });

    this.tradeOfferManager.on('sentOfferCanceled', (offer: any, reason: any) => {
      console.log(`‚ùå Sent offer ${offer.id} canceled: ${reason}`);
    });

    this.tradeOfferManager.on('receivedOfferCanceled', (offer: any, reason: any) => {
      console.log(`‚ùå Received offer ${offer.id} canceled: ${reason}`);
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.tradeOfferManager.on('pollFailure', (err: any) => {
      console.error('‚ùå Poll failure:', err);
    });

    this.tradeOfferManager.on('pollSuccess', () => {
      // –£–±–∏—Ä–∞–µ–º —Å–ø–∞–º –ª–æ–≥–æ–≤ - –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ polling –∞–∫—Ç–∏–≤–µ–Ω
      if (this.isPolling) {
        console.log('‚úÖ Poll successful');
      }
    });

    this.tradeOfferManager.on('sessionExpired', (err: any) => {
      console.error('‚ùå Session expired:', err);
      this.isLoggedIn = false;
    });
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤ Steam
   */
  async loginBot(bot: IBotDocument): Promise<boolean> {
    try {
      console.log(`üîê Attempting to login bot ${bot.displayName} to Steam...`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!bot.steamUsername || !bot.steamPassword) {
        console.error(`‚ùå Bot ${bot.displayName} missing username or password`);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ 2FA –∫–æ–¥–∞
      if (!bot.steamGuardCode) {
        console.log(`‚ö†Ô∏è Bot ${bot.displayName} requires 2FA code but none provided`);
        console.log(`üí° Please login through admin panel with 2FA code`);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ —É–∂–µ SteamUser
      if (this.isLoggedIn) {
        console.log(`‚ö†Ô∏è SteamUser is already logged on, logging off first...`);
        try {
          this.steamUser.logOff();
          this.isLoggedIn = false;
          // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è logout
          await new Promise(resolve => setTimeout(resolve, 2000));
          console.log(`‚úÖ SteamUser logged off successfully`);
        } catch (error) {
          console.log(`‚ö†Ô∏è Error during logout:`, error);
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
          this.isLoggedIn = false;
        }
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ª–æ–≥–∏–Ω–∞
      this.isLoggingIn = true;

      // –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ Steam —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      let attempts = 0;
      const maxAttempts = 3;
      
      while (attempts < maxAttempts) {
        try {
          await new Promise<void>((resolve, reject) => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –î–û –≤—ã–∑–æ–≤–∞ logOn
            this.steamUser.once('loggedOn', async () => {
              console.log(`‚úÖ Bot ${bot.displayName} logged in successfully`);
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ª–æ–≥–∏–Ω–∞
              this.isLoggingIn = false;
              
              resolve();
            });

            this.steamUser.once('error', (err: any) => {
              console.error(`‚ùå Bot ${bot.displayName} login error:`, err);
              this.isLoggingIn = false;
              reject(err);
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Steam Guard –∫–æ–¥–∞
            this.steamUser.once('steamGuard', (domain: string, callback: (code: string) => void) => {
              console.log(`üîê Steam Guard required for bot ${bot.displayName}, domain: ${domain || 'unknown'}`);
              
              // –ï—Å–ª–∏ –¥–æ–º–µ–Ω null –∏–ª–∏ –ø—É—Å—Ç–æ–π, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞
              if (!domain) {
                console.log(`‚ö†Ô∏è Steam Guard domain is null/empty, this might be an error`);
                callback(''); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
                return;
              }
              
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º 2FA –∫–æ–¥ –∏–∑ –±–æ—Ç–∞
              if (bot.steamGuardCode) {
                console.log(`üîê Using 2FA code for bot ${bot.displayName}`);
                callback(bot.steamGuardCode);
              } else {
                console.log(`‚ùå No 2FA code available for bot ${bot.displayName}`);
                callback(''); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
              }
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è web session cookies
            this.steamUser.once('webSession', async (sessionID: string, cookies: string[]) => {
              console.log(`üç™ Received web session for bot ${bot.displayName}`);
              console.log(`üìã Session ID: ${sessionID}`);
              console.log(`üç™ Cookies count: ${cookies.length}`);
              console.log(`üç™ Cookies:`, cookies);
              
              // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ cookies
              const sessionCookie = cookies.find(cookie => cookie.includes('sessionid='));
              const loginSecureCookie = cookies.find(cookie => cookie.includes('steamLoginSecure='));
              
              console.log(`üîç Found sessionCookie: ${!!sessionCookie}`);
              console.log(`üîç Found loginSecureCookie: ${!!loginSecureCookie}`);
              
              if (sessionCookie) {
                bot.steamSessionId = sessionCookie.split('=')[1];
                console.log(`üíæ Saved sessionid for bot ${bot.displayName}: ${bot.steamSessionId.substring(0, 10)}...`);
              } else {
                console.log(`‚ùå No sessionid cookie found in:`, cookies);
              }
              
              if (loginSecureCookie) {
                bot.steamLoginSecure = loginSecureCookie.split('=')[1];
                console.log(`üíæ Saved steamLoginSecure for bot ${bot.displayName}: ${bot.steamLoginSecure.substring(0, 10)}...`);
              } else {
                console.log(`‚ùå No steamLoginSecure cookie found in:`, cookies);
              }
              
              console.log(`üíæ Session data before save:`, {
                steamSessionId: bot.steamSessionId ? `${bot.steamSessionId.substring(0, 10)}...` : 'NULL',
                steamLoginSecure: bot.steamLoginSecure ? `${bot.steamLoginSecure.substring(0, 10)}...` : 'NULL'
              });
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –í–ù–£–¢–†–ò –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ webSession
              bot.isOnline = true;
              bot.lastLogin = new Date();
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ª–æ–≥–∏–Ω–µ
              bot.lastLoginError = undefined;
              bot.lastLoginErrorTime = undefined;
              bot.loginAttempts = 0;
              bot.isThrottled = false;
              bot.throttleUntil = undefined;
              
              try {
                await bot.save();
                console.log(`‚úÖ Bot ${bot.displayName} status saved with session data`);
                console.log(`üíæ Session data after save:`, {
                  steamSessionId: bot.steamSessionId ? `${bot.steamSessionId.substring(0, 10)}...` : 'NULL',
                  steamLoginSecure: bot.steamLoginSecure ? `${bot.steamLoginSecure.substring(0, 10)}...` : 'NULL'
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –≤ TradeOfferManager
                console.log(`üç™ Setting cookies in TradeOfferManager for bot ${bot.displayName}...`);
                this.tradeOfferManager.setCookies(cookies);
                console.log(`‚úÖ Cookies set in TradeOfferManager for bot ${bot.displayName}`);
                
              } catch (saveError) {
                console.error(`‚ùå Error saving bot status:`, saveError);
              }
            });

            // –¢–∞–π–º–∞—É—Ç –Ω–∞ –ª–æ–≥–∏–Ω
            setTimeout(() => {
              this.isLoggingIn = false;
              reject(new Error('Login timeout'));
            }, 30000);

            // –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º logOn
            this.steamUser.logOn({
              accountName: bot.steamUsername,
              password: bot.steamPassword,
              twoFactorCode: bot.steamGuardCode
            });
          });

          console.log(`‚úÖ Bot ${bot.displayName} login completed successfully`);
          return true;

        } catch (error: any) {
          attempts++;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
          if (error.message === 'RateLimitExceeded' || error.eresult === 84) {
            console.log(`‚ö†Ô∏è Rate limit exceeded for bot ${bot.displayName}, attempt ${attempts}/${maxAttempts}`);
            
            if (attempts < maxAttempts) {
              // –ñ–¥–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–µ–µ—Å—è –≤—Ä–µ–º—è: 30s, 60s, 120s
              const delay = 30 * Math.pow(2, attempts - 1) * 1000;
              console.log(`‚è≥ Waiting ${delay/1000} seconds before retry...`);
              await new Promise(resolve => setTimeout(resolve, delay));
              continue;
            } else {
              console.error(`‚ùå Max attempts reached for bot ${bot.displayName}`);
              break;
            }
          } else if (error.message === 'AccountLoginDeniedThrottle' || error.eresult === 87) {
            console.log(`üö´ Account login denied due to throttle for bot ${bot.displayName}`);
            console.log(`‚è≥ This account is temporarily blocked. Please wait 1-2 hours before trying again.`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            bot.lastLoginError = 'AccountLoginDeniedThrottle';
            bot.lastLoginErrorTime = new Date();
            bot.loginAttempts = (bot.loginAttempts || 0) + 1;
            bot.isThrottled = true;
            bot.throttleUntil = new Date(Date.now() + 2 * 60 * 60 * 1000); // 2 —á–∞—Å–∞
            bot.isOnline = false;
            await bot.save();
            
            console.log(`‚è≥ Bot ${bot.displayName} is now throttled until ${bot.throttleUntil}`);
            return false;
          } else {
            console.error(`‚ùå Login error for bot ${bot.displayName}:`, error);
            break;
          }
        }
      }

      // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
      bot.lastLoginError = 'Login failed after all attempts';
      bot.lastLoginErrorTime = new Date();
      bot.loginAttempts = (bot.loginAttempts || 0) + 1;
      bot.isOnline = false;
      await bot.save();

      console.error(`‚ùå Failed to login bot ${bot.displayName} after ${maxAttempts} attempts`);
      return false;

    } catch (error) {
      console.error(`‚ùå Error logging in bot ${bot.displayName}:`, error);
      return false;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
   */
  async restoreSession(bot: IBotDocument): Promise<boolean> {
    try {
      console.log(`üîÑ Checking session for bot ${bot.displayName}...`);

      if (!bot.steamSessionId || !bot.steamLoginSecure) {
        console.log(`‚ö†Ô∏è No saved session found for bot ${bot.displayName}`);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å cookies –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
      if (bot.steamSessionId === 'null' || bot.steamLoginSecure === 'null' || 
          bot.steamSessionId === 'undefined' || bot.steamLoginSecure === 'undefined') {
        console.log(`‚ùå Invalid cookies found for bot ${bot.displayName} - clearing session`);
        bot.steamSessionId = undefined;
        bot.steamLoginSecure = undefined;
        bot.isOnline = false;
        bot.lastLoginError = 'Invalid cookies';
        bot.lastLoginErrorTime = new Date();
        await bot.save();
        return false;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –≤ SteamCommunity
      const cookies = [
        `sessionid=${bot.steamSessionId}`,
        `steamLoginSecure=${bot.steamLoginSecure}`
      ];

      try {
        this.steamCommunity.setCookies(cookies);
        console.log(`‚úÖ Cookies set for bot ${bot.displayName}`);
      } catch (cookieError) {
        console.error(`‚ùå Error setting cookies for bot ${bot.displayName}:`, cookieError);
        // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ cookies
        bot.steamSessionId = undefined;
        bot.steamLoginSecure = undefined;
        bot.isOnline = false;
        bot.lastLoginError = 'Cookie setting failed';
        bot.lastLoginErrorTime = new Date();
        await bot.save();
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –ø—ã—Ç–∞—è—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      const isValid = await this.validateSession(bot);
      if (isValid) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TradeOfferManager —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        console.log(`üîÑ Initializing TradeOfferManager with restored session...`);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TradeOfferManager —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        this.tradeOfferManager = new TradeOfferManager({
          steam: this.steamUser,
          community: this.steamCommunity,
          domain: 'localhost',
          language: 'english',
          pollInterval: 30000,
          minimumPollInterval: 1000,
          cancelTime: 24 * 60 * 60 * 1000,
          pendingCancelTime: 7 * 24 * 60 * 60 * 1000,
          cancelOfferCount: 5,
          cancelOfferCountMinAge: 24 * 60 * 60 * 1000
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –≤ TradeOfferManager
        console.log(`üç™ Setting cookies in TradeOfferManager for bot ${bot.displayName}...`);
        this.tradeOfferManager.setCookies(cookies);
        console.log(`‚úÖ Cookies set in TradeOfferManager for bot ${bot.displayName}`);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ TradeOfferManager
        this.setupEventHandlers();
        
        this.isLoggedIn = true;
        bot.isOnline = true;
        bot.lastLogin = new Date();
        await bot.save();
        console.log(`‚úÖ Session restored successfully for bot ${bot.displayName}`);
        return true;
      } else {
        console.log(`‚ùå Session validation failed for bot ${bot.displayName}`);
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é —Å–µ—Å—Å–∏—é
        bot.steamSessionId = undefined;
        bot.steamLoginSecure = undefined;
        bot.isOnline = false;
        bot.lastLoginError = 'Session expired';
        bot.lastLoginErrorTime = new Date();
        await bot.save();
        return false;
      }

    } catch (error) {
      console.error(`‚ùå Failed to restore session for bot ${bot.displayName}:`, error);
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      bot.steamSessionId = undefined;
      bot.steamLoginSecure = undefined;
      bot.isOnline = false;
      bot.lastLoginError = error instanceof Error ? error.message : 'Restore session failed';
      bot.lastLoginErrorTime = new Date();
      await bot.save();
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
   */
  private async validateSession(bot: IBotDocument): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies
      if (!bot.steamSessionId || !bot.steamLoginSecure) {
        console.log(`‚ùå Session validation failed - missing cookies`);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É cookies (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º–∏)
      if (bot.steamSessionId.length < 10 || bot.steamLoginSecure.length < 10) {
        console.log(`‚ùå Session validation failed - cookies too short`);
        return false;
      }

      console.log(`‚úÖ Session validation successful - cookies present and valid length`);
      return true;
    } catch (error) {
      console.error(`‚ùå Session validation error for bot ${bot.displayName}:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è TradeOfferManager
   */
  async getBotInventory(bot: IBotDocument, appId: number = 730, contextId: string = '2', skipLoginCheck: boolean = false): Promise<SteamInventoryItem[]> {
    try {
      console.log(`üì¶ Getting inventory for bot ${bot.displayName}...`);

      if (!skipLoginCheck && !this.isLoggedIn) {
        throw new Error('Bot not logged in');
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º TradeOfferManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      const inventory = await new Promise<any[]>((resolve, reject) => {
        this.tradeOfferManager.getInventoryContents(appId, contextId, true, (err: any, items: any[]) => {
          if (err) {
            reject(err);
          } else {
            resolve(items);
          }
        });
      });

      console.log(`‚úÖ Got ${inventory.length} items for bot ${bot.displayName}`);
      return inventory;

    } catch (error) {
      console.error(`‚ùå Error getting inventory for bot ${bot.displayName}:`, error);
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –±–æ—Ç–∞
   */
  async syncBotInventory(bot: IBotDocument): Promise<InventorySyncResult> {
    try {
      console.log(`üîÑ Syncing inventory for bot ${bot.displayName}...`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      bot.syncStatus = 'syncing';
      await bot.save();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ Steam
      const steamInventory = await this.getBotInventory(bot);
      console.log(`üì¶ Got ${steamInventory.length} items from Steam for bot ${bot.displayName}`);
      
      const currentItems = new Map();
      const steamItems = new Map();

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–µ–∫—É—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±–æ—Ç–∞
      console.log(`üìã Current inventory in DB: ${bot.inventory.length} items`);
      bot.inventory.forEach(item => {
        currentItems.set(item.assetId, item);
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ Steam
      let added = 0;
      let updated = 0;
      let skipped = 0;

      for (const steamItem of steamInventory) {
        console.log(`üîç Processing Steam item: ${steamItem.name} (assetId: ${steamItem.assetid}, tradable: ${steamItem.tradable})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º tradable –∏—Å–ø–æ–ª—å–∑—É—è Boolean() –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const isTradable = Boolean(steamItem.tradable);
        console.log(`üîç Item tradable check: ${steamItem.tradable} (${typeof steamItem.tradable}) -> isTradable: ${isTradable}`);
        
        if (isTradable) {
          const item = {
            itemId: steamItem.classid,
            itemName: steamItem.name,
            steamId: steamItem.classid,
            assetId: steamItem.assetid,
            classId: steamItem.classid,
            instanceId: steamItem.instanceid,
            marketHashName: steamItem.market_hash_name,
            iconUrl: steamItem.icon_url,
            rarity: this.extractRarity(steamItem.tags),
            exterior: this.extractExterior(steamItem.descriptions)
          };

          console.log(`üìù Created item object: ${item.itemName} (assetId: ${item.assetId})`);
          steamItems.set(steamItem.assetid, item);

          if (!currentItems.has(steamItem.assetid)) {
            // –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
            console.log(`‚ûï Adding new item: ${item.itemName} (assetId: ${item.assetId})`);
            await bot.addItem(item);
            added++;
            console.log(`‚úÖ Item added successfully`);
          } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç
            const existingItem = currentItems.get(steamItem.assetid);
            if (this.hasItemChanged(existingItem, item)) {
              console.log(`üîÑ Updating existing item: ${item.itemName} (assetId: ${item.assetId})`);
              await bot.addItem(item);
              updated++;
              console.log(`‚úÖ Item updated successfully`);
            } else {
              console.log(`‚è≠Ô∏è Item unchanged: ${item.itemName} (assetId: ${item.assetId})`);
            }
          }
        } else {
          console.log(`üö´ Skipping non-tradable item: ${steamItem.name} (assetId: ${steamItem.assetid})`);
          skipped++;
        }
      }

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ Steam
      let removed = 0;
      for (const [assetId, item] of currentItems) {
        if (!steamItems.has(assetId)) {
          console.log(`üóëÔ∏è Removing item not in Steam: ${item.itemName} (assetId: ${assetId})`);
          await bot.removeItem(assetId);
          removed++;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      bot.lastSync = new Date();
      bot.syncStatus = 'idle';
      await bot.save();

      console.log(`‚úÖ Bot ${bot.displayName} inventory synced: +${added}, -${removed}, ~${updated}, skipped: ${skipped}`);
      console.log(`üìä Final inventory count in DB: ${bot.inventory.length} items`);
      
      return { added, removed, updated };

    } catch (error) {
      console.error(`‚ùå Error syncing bot ${bot.displayName} inventory:`, error);
      bot.syncStatus = 'error';
      await bot.save();
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –æ—Ç –±–æ—Ç–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async createTradeOffer(bot: IBotDocument, partnerSteamId: string, itemsToGive: string[], itemsToReceive: string[]): Promise<string> {
    try {
      console.log(`üéØ Creating trade offer from bot ${bot.displayName} to user ${partnerSteamId}`);

      if (!this.isLoggedIn) {
        throw new Error('Bot not logged in');
      }

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const offer = this.tradeOfferManager.createOffer(partnerSteamId);

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      for (const assetId of itemsToGive) {
        offer.addMyItem({
          appid: 730,
          contextid: '2',
          assetid: assetId
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
      for (const assetId of itemsToReceive) {
        offer.addTheirItem({
          appid: 730,
          contextid: '2',
          assetid: assetId
        });
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      offer.setMessage('Trade offer from CS2 Trading Platform');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–π–¥
      const result = await new Promise<any>((resolve, reject) => {
        offer.send((err: any, status: any) => {
          if (err) {
            reject(err);
          } else {
            resolve({ status, offerId: offer.id });
          }
        });
      });

      if (result.status === 'pending') {
        console.log(`‚úÖ Trade offer created: ${result.offerId}`);
        return result.offerId;
      } else {
        throw new Error(`Failed to create trade offer: ${result.status}`);
      }

    } catch (error) {
      console.error(`‚ùå Error creating trade offer:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤ –±–æ—Ç–∞
   */
  async getTradeOffers(bot: IBotDocument): Promise<any[]> {
    try {
      console.log(`üìã Getting trade offers for bot ${bot.displayName}`);

      if (!this.isLoggedIn) {
        throw new Error('Bot not logged in');
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º EOfferFilter.ActiveOnly (–∑–Ω–∞—á–µ–Ω–∏–µ 1) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤
      const offers = await new Promise<any[]>((resolve, reject) => {
        this.tradeOfferManager.getOffers(
          1, // EOfferFilter.ActiveOnly
          undefined, // historicalCutoff - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          (err: any, sent: any[], received: any[]) => {
            if (err) {
              reject(err);
            } else {
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–π–¥—ã
              resolve(received || []);
            }
          }
        );
      });

      console.log(`‚úÖ Got ${offers.length} trade offers for bot ${bot.displayName}`);
      return offers;

    } catch (error) {
      console.error(`‚ùå Error getting trade offers for bot ${bot.displayName}:`, error);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–π–¥–æ–≤
   */
  async processIncomingTrades(bot: IBotDocument): Promise<{ processed: number; accepted: number; declined: number }> {
    try {
      console.log(`üîÑ Processing incoming trades for bot ${bot.displayName}`);

      if (!bot.isActive || !bot.isOnline) {
        console.log(`‚ö†Ô∏è Bot ${bot.displayName} is not active or online, skipping trade processing`);
        return { processed: 0, accepted: 0, declined: 0 };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
      if (!this.isLoggedIn) {
        console.log(`‚ö†Ô∏è Bot ${bot.displayName} is not logged in, skipping trade processing`);
        return { processed: 0, accepted: 0, declined: 0 };
      }

      const offers = await this.getTradeOffers(bot);
      let processed = 0;
      let accepted = 0;
      let declined = 0;

      // –¢–µ–ø–µ—Ä—å offers —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–π–¥—ã
      console.log(`üìã Found ${offers.length} incoming trade offers for bot ${bot.displayName}`);

      for (const offer of offers) {
        try {
          const shouldAccept = await this.shouldAcceptTrade(bot, offer);
          
          if (shouldAccept) {
            console.log(`‚úÖ Accepting trade offer ${offer.id} for bot ${bot.displayName}`);
            await this.acceptTradeOffer(bot, offer.id);
            accepted++;
          } else {
            console.log(`‚ùå Declining trade offer ${offer.id} for bot ${bot.displayName}`);
            await this.declineTradeOffer(bot, offer.id);
            declined++;
          }
          
          processed++;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç—Ä–µ–π–¥–æ–≤
          await new Promise(resolve => setTimeout(resolve, 2000));
        } catch (error) {
          console.error(`‚ùå Error processing trade offer ${offer.id}:`, error);
        }
      }

      console.log(`‚úÖ Processed ${processed} trades: ${accepted} accepted, ${declined} declined`);
      return { processed, accepted, declined };

    } catch (error) {
      console.error(`‚ùå Error processing incoming trades for bot ${bot.displayName}:`, error);
      return { processed: 0, accepted: 0, declined: 0 };
    }
  }

  /**
   * –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç—Ä–µ–π–¥–∞
   */
  async acceptTradeOffer(bot: IBotDocument, tradeOfferId: string): Promise<boolean> {
    try {
      console.log(`‚úÖ Accepting trade offer ${tradeOfferId} for bot ${bot.displayName}`);

      const result = await new Promise<any>((resolve, reject) => {
        this.tradeOfferManager.acceptOffer(tradeOfferId, (err: any, status: any) => {
          if (err) {
            reject(err);
          } else {
            resolve(status);
          }
        });
      });

      if (result === 'accepted') {
        console.log(`‚úÖ Trade offer ${tradeOfferId} accepted successfully`);
        return true;
      } else {
        throw new Error(`Failed to accept trade offer: ${result}`);
      }

    } catch (error) {
      console.error(`‚ùå Error accepting trade offer ${tradeOfferId}:`, error);
      throw error;
    }
  }

  /**
   * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞
   */
  async declineTradeOffer(bot: IBotDocument, tradeOfferId: string): Promise<boolean> {
    try {
      console.log(`‚ùå Declining trade offer ${tradeOfferId} for bot ${bot.displayName}`);

      const result = await new Promise<any>((resolve, reject) => {
        this.tradeOfferManager.declineOffer(tradeOfferId, (err: any, status: any) => {
          if (err) {
            reject(err);
          } else {
            resolve(status);
          }
        });
      });

      if (result === 'declined') {
        console.log(`‚úÖ Trade offer ${tradeOfferId} declined successfully`);
        return true;
      } else {
        throw new Error(`Failed to decline trade offer: ${result}`);
      }

    } catch (error) {
      console.error(`‚ùå Error declining trade offer ${tradeOfferId}:`, error);
      throw error;
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ Steam
   */
  async logout(): Promise<void> {
    try {
      console.log('üîì Logging out from Steam...');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
      if (this.isPolling) {
        this.stopPolling();
      }
      
      this.steamUser.logOff();
      this.isLoggedIn = false;
      console.log('‚úÖ Logged out from Steam');
    } catch (error) {
      console.error('‚ùå Error logging out:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ polling –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤
   */
  startPolling(): void {
    if (this.isPolling) {
      console.log('‚ö†Ô∏è Polling is already running');
      return;
    }
    
    console.log('üîÑ Starting trade offer polling...');
    this.isPolling = true;
    this.tradeOfferManager.doPoll();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling
   */
  stopPolling(): void {
    if (!this.isPolling) {
      console.log('‚ö†Ô∏è Polling is not running');
      return;
    }
    
    console.log('‚èπÔ∏è Stopping trade offer polling...');
    this.isPolling = false;
    this.tradeOfferManager.shutdown();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ polling
   */
  isPollingActive(): boolean {
    return this.isPolling;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private extractRarity(tags: any[]): string {
    const rarityTag = tags.find(tag => tag.category === 'Rarity');
    return rarityTag ? rarityTag.localized_tag_name : 'Common';
  }

  private extractExterior(descriptions: any[]): string {
    const exteriorDesc = descriptions.find(desc => 
      desc.value && desc.value.includes('Exterior:')
    );
    return exteriorDesc ? exteriorDesc.value.split('Exterior:')[1].trim() : '';
  }

  private hasItemChanged(oldItem: any, newItem: any): boolean {
    return (
      oldItem.marketHashName !== newItem.marketHashName ||
      oldItem.iconUrl !== newItem.iconUrl ||
      oldItem.rarity !== newItem.rarity ||
      oldItem.exterior !== newItem.exterior
    );
  }

  private async shouldAcceptTrade(bot: IBotDocument, tradeOffer: SteamTradeOffer): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    if (bot.security.requireConfirmation) {
      return false; // –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const partnerSteamId = tradeOffer.partner.getSteamID64();
    if (bot.security.blockedUsers.includes(partnerSteamId)) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (bot.security.allowedUsers.length > 0 && 
        !bot.security.allowedUsers.includes(partnerSteamId)) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–π–¥–∞
    const totalValue = this.calculateTradeValue(tradeOffer);
    if (totalValue > bot.security.maxTradeValue) {
      return false;
    }

    return true;
  }

  private calculateTradeValue(tradeOffer: SteamTradeOffer): number {
    let totalValue = 0;
    
    // –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    [...tradeOffer.itemsToGive, ...tradeOffer.itemsToReceive].forEach(item => {
      // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
      totalValue += 1; // –ó–∞–≥–ª—É—à–∫–∞
    });
    
    return totalValue;
  }

  private handleNewOffer(offer: any): void {
    console.log(`üéÅ New trade offer received: ${offer.id} from ${offer.partner.getSteamID64()}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–π–¥–æ–≤
  }
}