import { Bot } from '../models/Bot';
import { Trade } from '../models/Trade';
import { User } from '../models/User';
import { IBotDocument, ITradeDocument, IUserDocument } from '../types';
import { SteamTradeManagerService } from './SteamTradeManagerService';
import { steamService } from './SteamService';
import { InventorySyncResult, TradeProcessingResult } from '../types/steam-types';

export class BotService {
  private steamTradeManagers: Map<string, SteamTradeManagerService> = new Map();

  constructor() {}

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ SteamTradeManagerService –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
   */
  private async getSteamTradeManager(botId: string, bot?: IBotDocument): Promise<SteamTradeManagerService> {
    if (!this.steamTradeManagers.has(botId)) {
      const manager = new SteamTradeManagerService();
      this.steamTradeManagers.set(botId, manager);
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –±–æ—Ç —Å —Å–µ—Å—Å–∏–µ–π, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë
      if (bot && bot.steamSessionId && bot.steamLoginSecure && bot.isOnline) {
        try {
          console.log(`üîÑ Auto-restoring session for bot ${bot.displayName}...`);
          await manager.restoreSession(bot);
        } catch (error) {
          console.log(`‚ö†Ô∏è Failed to auto-restore session for bot ${bot.displayName}:`, error);
        }
      }
    }
    return this.steamTradeManagers.get(botId)!;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ SteamTradeManagerService –¥–ª—è –±–æ—Ç–∞
   */
  private removeSteamTradeManager(botId: string): void {
    const manager = this.steamTradeManagers.get(botId);
    if (manager) {
      manager.logout();
      this.steamTradeManagers.delete(botId);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –±–æ—Ç–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
   */
  private getBotId(bot: IBotDocument): string {
    return (bot._id as any).toString();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
   */
  async createBot(botData: {
    displayName: string;
    steamId: string;
    steamUsername: string;
    steamPassword: string;
    steamGuardCode?: string;
    tradeUrl: string;
    isActive?: boolean;
    syncInterval?: number;
  }): Promise<IBotDocument> {
    try {
      const bot = new Bot({
        ...botData,
        isActive: botData.isActive ?? true,
        syncInterval: botData.syncInterval ?? 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        inventory: [],
        activeTrades: [],
        stats: {
          totalTrades: 0,
          successfulTrades: 0,
          failedTrades: 0,
          totalValue: 0
        },
        security: {
          maxTradeValue: 1000,
          requireConfirmation: false,
          allowedUsers: [],
          blockedUsers: []
        }
      });

      await bot.save();
      console.log(`‚úÖ Bot ${bot.displayName} created successfully`);
      return bot;
    } catch (error) {
      console.error('‚ùå Error creating bot:', error);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤ Steam
   */
  async loginBot(botId: string): Promise<boolean> {
    try {
      const bot = await Bot.findById(botId);
      if (!bot) {
        throw new Error(`Bot with ID ${botId} not found`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
      if (bot.isThrottled && bot.throttleUntil && new Date() < bot.throttleUntil) {
        console.log(`‚è∞ Bot ${bot.displayName} is throttled until ${bot.throttleUntil}`);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
      const manager = await this.getSteamTradeManager(botId, bot);
      if (bot.isOnline && manager['isLoggedIn']) {
        console.log(`‚úÖ Bot ${bot.displayName} is already logged in`);
        return true;
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
      const sessionRestored = await manager.restoreSession(bot);
      if (sessionRestored) {
        console.log(`‚úÖ Session restored for bot ${bot.displayName}`);
        return true;
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω
      console.log(`üîç Bot state before login:`, {
        isOnline: bot.isOnline,
        hasSessionId: !!bot.steamSessionId,
        hasLoginSecure: !!bot.steamLoginSecure,
        hasGuardCode: !!bot.steamGuardCode
      });

             // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
       if (bot.lastLoginErrorTime && 
           new Date().getTime() - bot.lastLoginErrorTime.getTime() > 2 * 60 * 60 * 1000) { // 2 —á–∞—Å–∞
         bot.loginAttempts = 0;
         bot.lastLoginError = undefined;
         await bot.save();
       }

      const success = await manager.loginBot(bot);
      
      console.log(`üîç Bot state after login:`, {
        isOnline: bot.isOnline,
        hasSessionId: !!bot.steamSessionId,
        hasLoginSecure: !!bot.steamLoginSecure,
        loginSuccess: success
      });

      return success;

    } catch (error) {
      console.error(`‚ùå Error logging in bot ${botId}:`, error);
      return false;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –±–æ—Ç–∞
   */
  async syncBotInventory(botId: string): Promise<InventorySyncResult> {
    try {
      const bot = await Bot.findById(botId);
      if (!bot) {
        throw new Error(`Bot with ID ${botId} not found`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
      if (bot.steamSessionId && bot.steamLoginSecure && bot.isOnline) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º SteamTradeManagerService –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        console.log(`üîÑ Using SteamTradeManager for bot ${bot.displayName} with saved session`);
        const manager = await this.getSteamTradeManager(this.getBotId(bot), bot);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        const sessionRestored = await manager.restoreSession(bot);
        if (sessionRestored) {
          console.log(`‚úÖ Session restored for bot ${bot.displayName}`);
          return await manager.syncBotInventory(bot);
        } else {
          console.log(`‚ùå Failed to restore session for bot ${bot.displayName}`);
          throw new Error(`Bot ${bot.displayName} session restoration failed. Please login via admin panel.`);
        }
      } else if (bot.steamUsername && bot.steamPassword) {
        // –£ –±–æ—Ç–∞ –µ—Å—Ç—å –∫—Ä–µ–¥—ã, –Ω–æ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏ - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
        console.log(`üîÑ Bot ${bot.displayName} has credentials but no session, attempting login...`);
        const manager = await this.getSteamTradeManager(this.getBotId(bot), bot);
        await manager.loginBot(bot);
        return await manager.syncBotInventory(bot);
      } else {
        // Fallback –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É API —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫—Ä–µ–¥–æ–≤ –∏ —Å–µ—Å—Å–∏–∏
        console.log(`‚ö†Ô∏è Bot ${bot.displayName} has no credentials or session, using public inventory API`);
        return await this.syncPublicInventory(bot);
      }
    } catch (error) {
      console.error(`‚ùå Error syncing bot inventory:`, error);
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (fallback –º–µ—Ç–æ–¥)
   */
  private async syncPublicInventory(bot: IBotDocument): Promise<InventorySyncResult> {
    try {
      console.log(`üîÑ Syncing public inventory for bot ${bot.displayName} (${bot.steamId})`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      bot.syncStatus = 'syncing';
      await bot.save();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —á–µ—Ä–µ–∑ SteamService
      const steamInventory = await steamService.getPlayerInventory(bot.steamId, 730, 5000);
      
      if (steamInventory.error) {
        throw new Error(`Steam API error: ${steamInventory.error}`);
      }

      const currentItems = new Map();
      const steamItems = new Map();

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–µ–∫—É—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±–æ—Ç–∞
      bot.inventory.forEach((item: any) => {
        currentItems.set(item.assetId, item);
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ Steam
      let added = 0;
      let updated = 0;

      if (steamInventory.rgInventory && steamInventory.descriptions) {
        for (const [assetId, asset] of Object.entries(steamInventory.rgInventory)) {
          const description = steamInventory.descriptions.find((desc: any) => 
            desc.classid === (asset as any).classid && desc.instanceid === (asset as any).instanceid
          );
          
          if (description && description.tradable === 1) {
            const steamItem = {
              itemId: description.classid,
              itemName: description.name,
              steamId: description.classid,
              assetId: (asset as any).id,
              classId: (asset as any).classid,
              instanceId: (asset as any).instanceid,
              marketHashName: description.market_hash_name,
              iconUrl: description.icon_url,
              rarity: this.extractRarity(description.tags),
              exterior: this.extractExterior(description.descriptions)
            };

            steamItems.set((asset as any).id, steamItem);

            if (!currentItems.has((asset as any).id)) {
              // –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
              await bot.addItem(steamItem);
              added++;
            } else {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç
              const existingItem = currentItems.get((asset as any).id);
              if (this.hasItemChanged(existingItem, steamItem)) {
                await bot.addItem(steamItem);
                updated++;
              }
            }
          }
        }
      }

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
      let removed = 0;
      for (const [assetId, item] of currentItems) {
        if (!steamItems.has(assetId)) {
          bot.inventory = bot.inventory.filter((invItem: any) => invItem.assetId !== assetId);
          removed++;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      bot.syncStatus = 'idle';
      bot.lastSync = new Date();
      await bot.save();

      console.log(`‚úÖ Public inventory synced for bot ${bot.displayName}: +${added}, -${removed}, ~${updated}`);

      return {
        added,
        removed,
        updated
      };

    } catch (error) {
      console.error(`‚ùå Error syncing public inventory for bot ${bot.displayName}:`, error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—à–∏–±–∫—É
      bot.syncStatus = 'error';
      await bot.save();
      
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–π –≤—Å–µ—Ö –±–æ—Ç–æ–≤
   */
  async syncAllBotInventories(): Promise<{ totalBots: number; successCount: number; errorCount: number }> {
    try {
      const bots = await Bot.find({ isActive: true, isOnline: true });
      let successCount = 0;
      let errorCount = 0;

      console.log(`üîÑ Starting sync for ${bots.length} online bots...`);

      for (const bot of bots) {
        try {
          // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º syncBotInventory - –æ–Ω —Å–∞–º —Ä–µ—à–∏—Ç, –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
          await this.syncBotInventory((bot._id as any).toString());
          successCount++;
          console.log(`‚úÖ Successfully synced bot ${bot.displayName}`);
        } catch (error) {
          console.error(`‚ùå Failed to sync bot ${bot.displayName}:`, error);
          errorCount++;
        }
      }

      console.log(`‚úÖ Sync completed: ${successCount} successful, ${errorCount} failed`);
      return { totalBots: bots.length, successCount, errorCount };

    } catch (error) {
      console.error('‚ùå Error syncing all bot inventories:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ Steam —Ç—Ä–µ–π–¥–∞
   */
  async createSteamTrade(tradeId: string, botId: string): Promise<string> {
    try {
      const trade = await Trade.findById(tradeId) as ITradeDocument;
      const bot = await Bot.findById(botId) as IBotDocument;

      if (!trade || !bot) {
        throw new Error('Trade or bot not found');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
      const manager = await this.getSteamTradeManager(botId, bot);
      if (!bot.isOnline || !manager['isLoggedIn']) {
        await manager.loginBot(bot);
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Steam ID
      const user = await User.findById(trade.userId) as IUserDocument;
      if (!user) {
        throw new Error('User not found');
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç—Ä–µ–π–¥–∞
      let itemsToGive: string[] = [];
      let itemsToReceive: string[] = [];

      if (trade.type === 'buy') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç —É –±–æ—Ç–∞ - –±–æ—Ç –æ—Ç–¥–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã
        for (const tradeItem of trade.items) {
          const botItem = bot.inventory.find(invItem => invItem.itemId === tradeItem.itemId);
          if (botItem) {
            itemsToGive.push(botItem.assetId);
          }
        }
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–µ—Ç –±–æ—Ç—É - –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã
        for (const tradeItem of trade.items) {
          itemsToReceive.push(tradeItem.steamId);
        }
      }

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥ —á–µ—Ä–µ–∑ SteamTradeManagerService
      const tradeOfferId = await manager.createTradeOffer(
        bot,
        user.steamId,
        itemsToGive,
        itemsToReceive
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–¥
      trade.botId = bot._id as any;
      trade.steamTradeId = tradeOfferId;
    trade.status = 'processing';
    await trade.save();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
      bot.stats.totalTrades++;
      await bot.save();

      console.log(`‚úÖ Steam trade created: ${tradeOfferId}`);
      return tradeOfferId;

    } catch (error) {
      console.error('‚ùå Error creating Steam trade:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Steam —Ç—Ä–µ–π–¥–∞
   */
  async checkSteamTradeStatus(tradeId: string): Promise<string> {
    try {
      const trade = await Trade.findById(tradeId) as ITradeDocument;
      if (!trade || !trade.steamTradeId) {
        throw new Error('Trade or Steam trade ID not found');
      }

      const bot = await Bot.findById(trade.botId) as IBotDocument;
      if (!bot) {
        throw new Error('Bot not found');
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ SteamTradeManagerService
      const manager = await this.getSteamTradeManager(this.getBotId(bot), bot);
      const offers = await manager.getTradeOffers(bot);
      const offer = offers.find(o => o.id === trade.steamTradeId);

      if (!offer) {
        return 'not_found';
      }

      let newStatus: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';
      
      switch (offer.state) {
        case 1: // ETradeOfferState.Invalid
          newStatus = 'failed';
          break;
        case 2: // ETradeOfferState.Active
          newStatus = 'pending';
          break;
        case 3: // ETradeOfferState.Accepted
          newStatus = 'completed';
          break;
        case 4: // ETradeOfferState.Countered
          newStatus = 'failed';
          break;
        case 5: // ETradeOfferState.Expired
          newStatus = 'cancelled';
          break;
        case 6: // ETradeOfferState.Canceled
          newStatus = 'cancelled';
          break;
        case 7: // ETradeOfferState.Declined
          newStatus = 'failed';
          break;
        case 8: // ETradeOfferState.InvalidItems
          newStatus = 'failed';
          break;
        case 9: // ETradeOfferState.CreatedNeedsConfirmation
          newStatus = 'processing';
          break;
        case 10: // ETradeOfferState.CanceledBySecondFactor
          newStatus = 'cancelled';
          break;
        case 11: // ETradeOfferState.InEscrow
          newStatus = 'processing';
          break;
        default:
          newStatus = 'pending';
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–π–¥–∞
      if (trade.status !== newStatus) {
        trade.status = newStatus;
        await trade.save();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
        if (newStatus === 'completed') {
          bot.stats.successfulTrades++;
        } else if (newStatus === 'failed' || newStatus === 'cancelled') {
          bot.stats.failedTrades++;
        }
        await bot.save();
      }

      return newStatus;

    } catch (error) {
      console.error('‚ùå Error checking Steam trade status:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
   */
  async processAllBotIncomingTrades(): Promise<{
    totalBots: number;
    processedBots: number;
    totalProcessed: number;
    totalAccepted: number;
    totalDeclined: number;
  }> {
    try {
      const bots = await Bot.find({ isActive: true, isOnline: true });
      let processedBots = 0;
      let totalProcessed = 0;
      let totalAccepted = 0;
      let totalDeclined = 0;

      console.log(`üîÑ Processing incoming trades for ${bots.length} online bots...`);

      for (const bot of bots) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
          const manager = await this.getSteamTradeManager(this.getBotId(bot), bot);
          if (!bot.isOnline || !manager['isLoggedIn']) {
            console.log(`‚ö†Ô∏è Skipping bot ${bot.displayName} - not logged in`);
            continue;
          }
          
          const result = await manager.processIncomingTrades(bot);
          totalProcessed += result.processed;
          totalAccepted += result.accepted;
          totalDeclined += result.declined;
          processedBots++;

          console.log(`‚úÖ Processed ${result.processed} trades for bot ${bot.displayName}: ${result.accepted} accepted, ${result.declined} declined`);

        } catch (error) {
          console.error(`‚ùå Error processing trades for bot ${bot.displayName}:`, error);
        }
      }

      console.log(`‚úÖ Processed ${totalProcessed} trades: ${totalAccepted} accepted, ${totalDeclined} declined`);

      return {
        totalBots: bots.length,
        processedBots,
        totalProcessed,
        totalAccepted,
        totalDeclined
      };

    } catch (error) {
      console.error('‚ùå Error processing all bot incoming trades:', error);
      throw error;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
   */
  async restoreBotSession(bot: IBotDocument): Promise<boolean> {
    try {
      const manager = await this.getSteamTradeManager(this.getBotId(bot), bot);
      return await manager.restoreSession(bot);
    } catch (error) {
      console.error(`‚ùå Error restoring session for bot ${bot.displayName}:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
   */
  async getAllBots(): Promise<IBotDocument[]> {
    try {
      return await Bot.find().sort({ createdAt: -1 });
    } catch (error) {
      console.error('‚ùå Error getting all bots:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–æ ID
   */
  async getBotById(botId: string): Promise<IBotDocument | null> {
    try {
      return await Bot.findById(botId);
    } catch (error) {
      console.error('‚ùå Error getting bot by ID:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
   */
  async updateBot(botId: string, updateData: Partial<IBotDocument>): Promise<IBotDocument | null> {
    try {
      return await Bot.findByIdAndUpdate(botId, updateData, { new: true });
    } catch (error) {
      console.error('‚ùå Error updating bot:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞
   */
  async deleteBot(botId: string): Promise<boolean> {
    try {
      const result = await Bot.findByIdAndDelete(botId);
      return !!result;
    } catch (error) {
      console.error('‚ùå Error deleting bot:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤
   */
  async getBotStats(): Promise<{
    totalBots: number;
    activeBots: number;
    onlineBots: number;
    totalInventoryItems: number;
    totalActiveTrades: number;
    totalTrades: number;
    successfulTrades: number;
    failedTrades: number;
  }> {
    try {
      const bots = await Bot.find();
      
      const stats = {
        totalBots: bots.length,
        activeBots: bots.filter(bot => bot.isActive).length,
        onlineBots: bots.filter(bot => bot.isOnline).length,
        totalInventoryItems: bots.reduce((sum, bot) => sum + bot.inventory.length, 0),
        totalActiveTrades: bots.reduce((sum, bot) => sum + bot.activeTrades.length, 0),
        totalTrades: bots.reduce((sum, bot) => sum + bot.stats.totalTrades, 0),
        successfulTrades: bots.reduce((sum, bot) => sum + bot.stats.successfulTrades, 0),
        failedTrades: bots.reduce((sum, bot) => sum + bot.stats.failedTrades, 0)
      };

      return stats;
    } catch (error) {
      console.error('‚ùå Error getting bot stats:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
   */
  async processBotIncomingTrades(botId: string): Promise<TradeProcessingResult> {
    try {
      const bot = await Bot.findById(botId);
      if (!bot) {
        throw new Error(`Bot with ID ${botId} not found`);
      }

      const manager = await this.getSteamTradeManager(botId, bot);
      const result = await manager.processIncomingTrades(bot);
      return result;
    } catch (error) {
      console.error(`‚ùå Error processing incoming trades for bot ${botId}:`, error);
      return { processed: 0, accepted: 0, declined: 0 };
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
   */
  private extractRarity(tags: any[]): string {
    if (!tags) return 'Common';
    
    const rarityTag = tags.find((tag: any) => tag.category === 'Rarity');
    return rarityTag ? rarityTag.name : 'Common';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
   */
  private extractExterior(descriptions: any[]): string {
    if (!descriptions) return '';
    
    const exteriorDesc = descriptions.find((desc: any) => 
      desc.value && desc.value.includes('Exterior:')
    );
    
    if (exteriorDesc) {
      return exteriorDesc.value.replace('Exterior: ', '');
    }
    
    return '';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç
   */
  private hasItemChanged(existingItem: any, newItem: any): boolean {
    return existingItem.itemName !== newItem.itemName ||
           existingItem.marketHashName !== newItem.marketHashName ||
           existingItem.iconUrl !== newItem.iconUrl ||
           existingItem.rarity !== newItem.rarity ||
           existingItem.exterior !== newItem.exterior;
  }
}