import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import dotenv from 'dotenv';
import passport from 'passport';
import SteamStrategy from 'passport-steam';
import rateLimit from 'express-rate-limit';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
import { connectDatabase } from './config/database';
import { AuthController } from './controllers/AuthController';
import { UserController } from './controllers/UserController';
import { ItemController } from './controllers/ItemController';
import { TradeController } from './controllers/TradeController';
import { TransactionController } from './controllers/TransactionController';
import { BotController } from './controllers/BotController';
import { authenticateToken } from './middleware/auth';
import { botSyncService } from './services/BotSyncService';

const app = express();
const PORT = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const corsOptions = {
  origin: process.env.FRONTEND_URL || 'http://localhost:5173',
  credentials: true,
  optionsSuccessStatus: 200
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ rate limiting
const limiter = rateLimit({
  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000'), // 15 –º–∏–Ω—É—Ç
  max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '1000'), // —É–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤
  message: {
    success: false,
    error: 'Too many requests from this IP, please try again later.'
  },
  standardHeaders: true, // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç rate limit info –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
  legacyHeaders: false, // –û—Ç–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  skipSuccessfulRequests: false, // –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  skipFailedRequests: false, // –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  keyGenerator: (req) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º IP + User-Agent –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    return req.ip + ':' + (req.headers['user-agent'] || 'unknown');
  }
});

// –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π rate limiter –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
const apiLimiter = rateLimit({
  windowMs: parseInt(process.env.API_RATE_LIMIT_WINDOW_MS || '60000'), // 1 –º–∏–Ω—É—Ç–∞
  max: parseInt(process.env.API_RATE_LIMIT_MAX_REQUESTS || '300'), // 300 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
  message: {
    success: false,
    error: 'API rate limit exceeded, please try again later.'
  },
  standardHeaders: true,
  legacyHeaders: false
});

// –û—á–µ–Ω—å –º—è–≥–∫–∏–π rate limiter –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const staticLimiter = rateLimit({
  windowMs: parseInt(process.env.STATIC_RATE_LIMIT_WINDOW_MS || '60000'), // 1 –º–∏–Ω—É—Ç–∞
  max: parseInt(process.env.STATIC_RATE_LIMIT_MAX_REQUESTS || '1000'), // 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
  message: {
    success: false,
    error: 'Too many requests for static files, please try again later.'
  },
  standardHeaders: true,
  legacyHeaders: false
});

// Middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'", "'unsafe-inline'"],
      scriptSrcAttr: ["'unsafe-inline'"], // –†–∞–∑—Ä–µ—à–∞–µ–º inline event handlers
      imgSrc: [
        "'self'", 
        "data:", 
        "https://community.fastly.steamstatic.com", 
        "https://steamcommunity.com",
        "https://steamcdn-a.akamaihd.net",
        "https://cdn.cloudflare.steamstatic.com",
        "https://steamstatic.com",
        "https://*.steamstatic.com",
        "https://*.steamcdn-a.akamaihd.net",
        "https://*.steamcommunity.com",
        "https://via.placeholder.com",
        "https://*.akamaihd.net",
        "https://*.fastly.steamstatic.com",
        "https://*.cloudflare.steamstatic.com"
      ],
      connectSrc: [
        "'self'",
        "https://api.steampowered.com",
        "https://steamcommunity.com",
        "https://community.fastly.steamstatic.com"
      ],
      fontSrc: ["'self'"],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'none'"],
    },
  },
}));
app.use(cors(corsOptions));
app.use(morgan('combined'));

// –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting —Ç–æ–ª—å–∫–æ –∫ API –º–∞—Ä—à—Ä—É—Ç–∞–º, –Ω–µ –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
if (process.env.DISABLE_RATE_LIMIT !== 'true') {
  app.use('/api', apiLimiter); // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ª–∏–º–∏—Ç–µ—Ä –¥–ª—è API
  app.use('/test-', staticLimiter); // –û—á–µ–Ω—å –º—è–≥–∫–∏–π –ª–∏–º–∏—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  
  // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è rate limit —Å–æ–±—ã—Ç–∏–π
  app.use((req, res, next) => {
    const remaining = res.getHeader('X-RateLimit-Remaining');
    const limit = res.getHeader('X-RateLimit-Limit');
    const reset = res.getHeader('X-RateLimit-Reset');
    
    if (remaining !== undefined && limit !== undefined) {
      const remainingNum = parseInt(remaining as string);
      const limitNum = parseInt(limit as string);
      const usagePercent = ((limitNum - remainingNum) / limitNum) * 100;
      
      if (usagePercent > 80) {
        console.log(`‚ö†Ô∏è Rate limit warning: ${usagePercent.toFixed(1)}% used (${remaining}/${limit}) for ${req.ip}`);
      }
    }
    
    next();
  });
  
  console.log('üîí Rate limiting enabled');
} else {
  console.log('‚ö†Ô∏è Rate limiting disabled for development');
}

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname, '../public')));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Passport
app.use(passport.initialize());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Steam Strategy
passport.use(new SteamStrategy({
  returnURL: process.env.STEAM_RETURN_URL || 'http://localhost:3000/auth/steam/return',
  realm: process.env.STEAM_REALM || 'http://localhost:3000',
  apiKey: process.env.STEAM_API_KEY || ''
}, (identifier: string, profile: any, done: any) => {
  return done(null, profile);
}));

// –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è Passport)
passport.serializeUser((user: any, done) => {
  done(null, user);
});

// –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è Passport)
passport.deserializeUser((user: any, done) => {
  done(null, user);
});

// ==================== –ë–ê–ó–û–í–´–ï –ú–ê–†–®–†–£–¢–´ ====================

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'CS2 Trading Platform API',
    version: '1.0.0',
    status: 'running',
    env: {
      port: process.env.PORT,
      nodeEnv: process.env.NODE_ENV,
      steamApiKey: process.env.STEAM_API_KEY ? 'Configured' : 'Not configured',
      jwtSecret: process.env.JWT_SECRET ? 'Configured' : 'Not configured'
    }
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/test', (req, res) => {
  res.json({
    success: true,
    message: 'API is working!',
    timestamp: new Date().toISOString(),
    env: {
      steamApiKey: process.env.STEAM_API_KEY ? 'Configured' : 'Not configured',
      steamReturnUrl: process.env.STEAM_RETURN_URL,
      steamRealm: process.env.STEAM_REALM
    }
  });
});

// ==================== –¢–ï–°–¢–û–í–´–ï –°–¢–†–ê–ù–ò–¶–´ ====================

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/test-auth', (req, res) => {
  res.sendFile(path.join(__dirname, '../public/test-auth.html'));
});



app.get('/test-images', (req, res) => {
  res.sendFile(path.join(__dirname, '../public/test-images.html'));
});

app.get('/test-trading', (req, res) => {
  res.sendFile(path.join(__dirname, '../public/test-trading.html'));
});

app.get('/test-bots', (req, res) => {
  res.sendFile(path.join(__dirname, '../public/test-bots.html'));
});

// ==================== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ====================

// Steam –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
app.get('/auth/steam', AuthController.steamAuth);
app.get('/auth/steam/return', AuthController.steamCallback);

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
app.post('/auth/logout', AuthController.logout);
app.get('/auth/check', AuthController.checkAuth);

// ==================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ====================

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', UserController.getUsers);

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users/stats', UserController.getUserStats);

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Steam ID
app.get('/api/users/steam/:steamId', UserController.getUserBySteamId);

// –ü—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/users/profile', authenticateToken, UserController.getCurrentUser);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/users/profile', authenticateToken, UserController.updateUserProfile);

// ==================== –ü–†–ï–î–ú–ï–¢–´ –ò –ò–ù–í–ï–ù–¢–ê–†–¨ ====================

// –ü—Ä–µ–¥–º–µ—Ç—ã
app.get('/api/items', ItemController.getItems);
app.get('/api/items/stats', ItemController.getItemsStats);
app.get('/api/items/:id', ItemController.getItem);
app.get('/api/items/steam/:steamId', ItemController.getItemBySteamId);

// –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
app.get('/api/inventory/user', authenticateToken, ItemController.getCurrentUserInventory);
app.get('/api/inventory/:steamId', authenticateToken, ItemController.getUserInventory);
app.get('/api/inventory', ItemController.getBotInventory);

// –ê–¥–º–∏–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
app.put('/api/items/:id/price', authenticateToken, ItemController.updateItemPrice);
app.put('/api/items/:id/quantity', authenticateToken, ItemController.updateItemQuantity);

// ==================== –¢–†–ï–ô–î–´ ====================

app.post('/api/trades/calculate', authenticateToken, TradeController.calculateTrade);
app.post('/api/trades', authenticateToken, TradeController.createTrade);
app.get('/api/trades', authenticateToken, TradeController.getUserTrades);
app.get('/api/trades/:id', authenticateToken, TradeController.getTrade);
app.put('/api/trades/:id/cancel', authenticateToken, TradeController.cancelTrade);
app.put('/api/trades/:id/process', authenticateToken, TradeController.processTrade);
app.put('/api/trades/:id/complete', authenticateToken, TradeController.completeTrade);

// ==================== –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ====================

app.post('/api/transactions/deposit', authenticateToken, TransactionController.createDeposit);
app.post('/api/transactions/withdrawal', authenticateToken, TransactionController.createWithdrawal);
app.get('/api/transactions', authenticateToken, TransactionController.getUserTransactions);
app.get('/api/transactions/balance', authenticateToken, TransactionController.getUserBalance);
app.put('/api/transactions/:transactionId/complete', authenticateToken, TransactionController.completeTransaction);
app.put('/api/transactions/:transactionId/cancel', authenticateToken, TransactionController.cancelTransaction);
app.get('/api/transactions/trade/:tradeId', authenticateToken, TransactionController.getTransactionsByTrade);

// ==================== –ë–û–¢–´ ====================

// Bot statistics and status (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥ /:id)
app.get('/api/bots/stats', BotController.getBotStats);
app.get('/api/bots/health', BotController.getBotHealth);
app.get('/api/bots/sync/status', BotController.getSyncStatus);

// Bot routes
app.get('/api/bots', BotController.getAllBots);
app.get('/api/bots/:id', BotController.getBotById);
app.get('/api/bots/:botId/inventory', BotController.getBotInventory);
app.post('/api/bots', BotController.createBot);
app.post('/api/bots/create-test', BotController.createBot); // –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
app.put('/api/bots/:id', BotController.updateBot);
app.delete('/api/bots/:id', BotController.deleteBot);

// Bot authentication
app.post('/api/bots/:botId/login', BotController.loginBot);

// Bot synchronization
app.post('/api/bots/:botId/sync', BotController.syncBotInventory);
app.post('/api/bots/sync/all', BotController.syncAllBots);
app.post('/api/bots/:botId/sync/force', BotController.forceSyncBot);

// Trade processing
app.post('/api/bots/trades/process', BotController.processIncomingTrades);

// Sync service management
app.post('/api/bots/sync/start', BotController.startSync);
app.post('/api/bots/sync/stop', BotController.stopSync);

// ==================== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ====================

// ==================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====================

app.get('/admin', (req, res) => {
  res.json({ message: 'Admin Panel - Coming soon' });
});

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ====================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ 404
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'Route not found'
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((error: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('Global error handler:', error);
  
  res.status(error.status || 500).json({
    success: false,
    error: process.env.NODE_ENV === 'production' 
      ? 'Internal server error' 
      : error.message
  });
});

// ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====================

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º app –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export { app };

const startServer = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectDatabase();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ç–µ—Å—Ç–∞—Ö
    if (process.env.DISABLE_BOT_SYNC !== 'true') {
      console.log('ü§ñ Starting bot sync service...');
      botSyncService.startAutoSync({
        syncIntervalMs: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
        tradeProcessingIntervalMs: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã
        cleanupIntervalMs: 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç
      });
    } else {
      console.log('ü§ñ Bot sync service disabled for tests');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      console.log(`üöÄ Server running on port ${PORT}`);
      console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üîó Frontend URL: ${process.env.FRONTEND_URL || 'http://localhost:5173'}`);
      console.log(`üéÆ Steam API: ${process.env.STEAM_API_KEY ? 'Configured' : 'Not configured'}`);
      console.log(`üîë JWT Secret: ${process.env.JWT_SECRET ? 'Configured' : 'Not configured'}`);
      console.log(`ü§ñ Bot Sync Service: ${process.env.DISABLE_BOT_SYNC === 'true' ? 'Disabled' : 'Started'}`);
      console.log(`üìù Test endpoint: http://localhost:${PORT}/test`);
      console.log(`üß™ Test pages: http://localhost:${PORT}/test-auth, /test-trading, /test-bots`);
      console.log(`üéÆ Steam auth: http://localhost:${PORT}/auth/steam`);
    });
  } catch (error) {
    console.error('‚ùå Failed to start server:', error);
    process.exit(1);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  process.exit(0);
});

startServer();
