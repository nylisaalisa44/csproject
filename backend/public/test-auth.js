const API_BASE = 'http://localhost:3000';

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JWT —Ç–æ–∫–µ–Ω–æ–º
function saveToken(token) {
    localStorage.setItem('jwt_token', token);
    document.getElementById('token').value = token;
    console.log('JWT token saved:', token);
}

function loadToken() {
    const token = localStorage.getItem('jwt_token');
    if (token) {
        document.getElementById('token').value = token;
        console.log('JWT token loaded from localStorage');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        showTokenStatus();
    }
    return token;
}

function showTokenStatus() {
    const token = localStorage.getItem('jwt_token');
    if (token) {
        showResponse({
            message: 'üîë JWT —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ localStorage –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω',
            status: 'Token loaded',
            note: '–ú–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã'
        });
    }
}

function clearToken() {
    localStorage.removeItem('jwt_token');
    document.getElementById('token').value = '';
    console.log('JWT token cleared');
}

function showResponse(data, isError = false) {
    const responseDiv = document.getElementById('response');
    responseDiv.style.display = 'block';
    responseDiv.style.background = isError ? '#f8d7da' : '#d4edda';
    responseDiv.style.color = isError ? '#721c24' : '#155724';
    responseDiv.style.border = isError ? '1px solid #f5c6cb' : '1px solid #c3e6cb';
    responseDiv.textContent = JSON.stringify(data, null, 2);
    
    // –ï—Å–ª–∏ —ç—Ç–æ —É—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
    if (!isError && data.success && data.data && data.data.token) {
        saveToken(data.data.token);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const enhancedData = {
            message: '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! JWT —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –ø–æ–ª–µ –≤—ã—à–µ.',
            originalResponse: data,
            tokenSaved: true,
            note: '–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã'
        };
        
        responseDiv.textContent = JSON.stringify(enhancedData, null, 2);
    }
}

async function testAPI(endpoint) {
    try {
        const response = await fetch(`${API_BASE}${endpoint}`);
        const data = await response.json();
        showResponse(data);
    } catch (error) {
        showResponse({ error: error.message }, true);
    }
}

async function testWithToken(endpoint) {
    let token = document.getElementById('token').value;
    if (!token) {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ localStorage
        token = loadToken();
        if (!token) {
            showResponse({ error: 'JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Steam.' }, true);
            return;
        }
    }

    try {
        const response = await fetch(`${API_BASE}${endpoint}`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        const data = await response.json();
        showResponse(data);
    } catch (error) {
        showResponse({ error: error.message }, true);
    }
}

function testSteamAuth() {
    console.log('Steam auth button clicked!'); // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Steam –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    window.location.href = `${API_BASE}/auth/steam`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function checkAllUsers() {
    console.log('Checking all users...');
    testAPI('/api/users');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function checkUserStats() {
    console.log('Checking user stats...');
    testAPI('/api/users/stats');
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Steam ID
function searchUserBySteamId() {
    const steamId = prompt('Enter Steam ID (e.g., 76561199045438526):');
    if (steamId) {
        console.log(`Searching user by Steam ID: ${steamId}`);
        testAPI(`/api/users/steam/${steamId}`);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function addEventListeners() {
    console.log('Adding event listeners...'); // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    // Steam –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const steamBtn = document.getElementById('steamAuthBtn');
    if (steamBtn) {
        steamBtn.addEventListener('click', testSteamAuth);
        console.log('Steam auth button listener added');
    } else {
        console.error('Steam auth button not found!');
    }
    
    // API —Ç–µ—Å—Ç—ã
    document.getElementById('testMainBtn').addEventListener('click', () => testAPI('/'));
    document.getElementById('testEndpointBtn').addEventListener('click', () => testAPI('/test'));
    document.getElementById('testUsersBtn').addEventListener('click', () => testAPI('/api/users'));
    document.getElementById('testItemsBtn').addEventListener('click', () => testAPI('/api/items'));
    document.getElementById('testTradesBtn').addEventListener('click', () => testAPI('/api/trades'));
    document.getElementById('testPaymentsBtn').addEventListener('click', () => testAPI('/api/payments'));
    document.getElementById('testBotsBtn').addEventListener('click', () => testAPI('/api/bots'));
    document.getElementById('testAdminBtn').addEventListener('click', () => testAPI('/admin'));
    
    // –¢–µ—Å—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º
    document.getElementById('testProfileBtn').addEventListener('click', () => testWithToken('/auth/profile'));
    document.getElementById('testCheckBtn').addEventListener('click', () => testWithToken('/auth/check'));
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    document.getElementById('checkUsersBtn').addEventListener('click', checkAllUsers);
    document.getElementById('checkStatsBtn').addEventListener('click', checkUserStats);
    document.getElementById('searchUserBtn').addEventListener('click', searchUserBySteamId);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–º
    document.getElementById('clearTokenBtn').addEventListener('click', clearToken);
    
    console.log('All event listeners added');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL
function getUrlParams() {
    const urlParams = new URLSearchParams(window.location.search);
    return {
        token: urlParams.get('token'),
        success: urlParams.get('success'),
        user: urlParams.get('user')
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
function cleanUrl() {
    if (window.history && window.history.pushState) {
        window.history.pushState({}, document.title, window.location.pathname);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ URL
function handleAuthFromUrl() {
    const params = getUrlParams();
    
    if (params.token && params.success === 'true') {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            saveToken(params.token);
            
            // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userData = params.user ? JSON.parse(decodeURIComponent(params.user)) : null;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            showResponse({
                message: '‚úÖ Steam –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! JWT —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.',
                user: userData,
                tokenSaved: true,
                note: '–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã'
            });
            
            // –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            cleanUrl();
            
            console.log('Token saved from URL parameters');
        } catch (error) {
            console.error('Error processing auth from URL:', error);
            showResponse({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' }, true);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = function() {
    console.log('Page loaded, initializing...'); // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    addEventListeners();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
    handleAuthFromUrl();
    
    // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–µ—Å–ª–∏ –Ω–µ—Ç –≤ URL)
    const params = getUrlParams();
    if (!params.token) {
        loadToken();
    }
    
    testAPI('/');
    console.log('Initialization complete');
};
