// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let authToken = null;
let currentUser = null;

// –£—Ç–∏–ª–∏—Ç—ã
function getAuthToken() {
    const token = localStorage.getItem('jwt_token');
    console.log('üîç Getting auth token:', token ? 'token exists' : 'token not found');
    return token;
}

function setAuthToken(token) {
    console.log('üíæ Setting auth token:', token ? 'token exists' : 'token is null/undefined');
    localStorage.setItem('jwt_token', token);
    authToken = token;
    console.log('‚úÖ Token saved to localStorage and authToken variable');
}

function removeAuthToken() {
    localStorage.removeItem('jwt_token');
    authToken = null;
    currentUser = null;
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function showResponse(data) {
    const responseDiv = document.getElementById('response');
    responseDiv.textContent = JSON.stringify(data, null, 2);
    responseDiv.style.display = 'block';
}

function updateAuthStatus(status, message) {
    const authStatus = document.getElementById('auth-status');
    authStatus.className = `status ${status}`;
    authStatus.innerHTML = message;
}

function updateBalance(balance) {
    const balanceDisplay = document.getElementById('balance-display');
    const balanceAmount = document.getElementById('balance-amount');
    balanceAmount.textContent = balance.toFixed(2);
    balanceDisplay.style.display = 'block';
}

// API —Ñ—É–Ω–∫—Ü–∏–∏
async function apiCall(endpoint, options = {}) {
    const token = getAuthToken();
    
    const defaultOptions = {
        headers: {
            'Content-Type': 'application/json',
            ...(token && { 'Authorization': `Bearer ${token}` })
        }
    };

    try {
        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º /api –∫ —Ä–æ—É—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /auth
        const url = endpoint.startsWith('/auth') ? endpoint : `/api${endpoint}`;
        const response = await fetch(url, { ...defaultOptions, ...options });
        const data = await response.json();
        
        if (!response.ok) {
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏, –≤–∫–ª—é—á–∞–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (data.details) {
                throw new Error(JSON.stringify({
                    error: data.error || `HTTP ${response.status}`,
                    message: data.message,
                    details: data.details
                }));
            } else {
                throw new Error(data.error || data.message || `HTTP ${response.status}`);
            }
        }
        
        return data;
    } catch (error) {
        console.error('API Error:', error);
        throw error;
    }
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async function checkAuthStatus() {
    const token = getAuthToken();
    console.log('Checking auth status, token:', token ? 'exists' : 'not found');
    
    if (!token) {
        updateAuthStatus('warning', '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Steam –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π.');
        return false;
    }

    try {
        console.log('Making API call to /auth/check');
        const data = await apiCall('/auth/check');
        console.log('Auth check response:', data);
        currentUser = data.data.user;
        updateAuthStatus('success', `–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: ${currentUser.displayName} (${currentUser.steamId})`);
        if (currentUser.balance !== undefined) {
            updateBalance(currentUser.balance);
        }
        return true;
    } catch (error) {
        console.error('Auth check error:', error);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ - —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ 401/403 –æ—à–∏–±–∫–∞—Ö
        if (error.message.includes('401') || error.message.includes('403') || error.message.includes('Unauthorized')) {
            updateAuthStatus('error', '–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.');
            removeAuthToken();
        } else {
            updateAuthStatus('warning', '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');
        }
        return false;
    }
}

function loginWithSteam() {
    window.location.href = '/auth/steam';
}

function logout() {
    removeAuthToken();
    updateAuthStatus('info', '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    document.getElementById('balance-display').style.display = 'none';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ URL
function handleAuthFromUrl() {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    const success = urlParams.get('success');
    const user = urlParams.get('user');

    console.log('üîç handleAuthFromUrl - URL params:', { 
        token: token ? 'exists' : 'not found', 
        success, 
        user: user ? 'exists' : 'not found',
        currentUrl: window.location.href
    });

    if (token && success === 'true') {
        console.log('‚úÖ Processing auth from URL');
        setAuthToken(token);
        console.log('üíæ Token saved to localStorage');
        
        if (user) {
            try {
                currentUser = JSON.parse(decodeURIComponent(user));
                console.log('üë§ User data parsed:', currentUser);
                updateAuthStatus('success', `–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: ${currentUser.displayName} (${currentUser.steamId})`);
                updateBalance(currentUser.balance || 0);
            } catch (e) {
                console.error('‚ùå Error parsing user data:', e);
            }
        }
        
        // –û—á–∏—â–∞–µ–º URL
        window.history.pushState({}, document.title, window.location.pathname);
        console.log('üßπ URL cleaned, token saved');
        return true; // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    } else {
        console.log('‚ùå No auth data in URL or success !== true');
        return false; // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    }
}

// –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function createDeposit() {
    const amount = parseFloat(document.getElementById('deposit-amount').value);
    const currency = document.getElementById('deposit-currency').value;
    const cryptoAddress = document.getElementById('deposit-crypto-address').value;

    if (!amount || amount <= 0) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
        return;
    }

    try {
        const data = await apiCall('/transactions/deposit', {
            method: 'POST',
            body: JSON.stringify({
                amount,
                currency,
                cryptoAddress: cryptoAddress || undefined,
                cryptoType: currency === 'CRYPTO' ? 'ETH' : undefined
            })
        });
        
        showResponse(data);
        alert('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!');
    } catch (error) {
        showResponse({ error: error.message });
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

async function createWithdrawal() {
    const amount = parseFloat(document.getElementById('withdrawal-amount').value);
    const currency = document.getElementById('withdrawal-currency').value;
    const cryptoAddress = document.getElementById('withdrawal-crypto-address').value;

    if (!amount || amount <= 0) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
        return;
    }

    if (currency === 'CRYPTO' && !cryptoAddress) {
        alert('–î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –≤—ã–≤–æ–¥–∞
    try {
        const balanceData = await apiCall('/transactions/balance');
        const currentBalance = balanceData.data.balance;
        
        if (currentBalance < amount) {
            alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $${currentBalance.toFixed(2)}\n–¢—Ä–µ–±—É–µ—Ç—Å—è: $${amount.toFixed(2)}\n–ù–µ–¥–æ—Å—Ç–∞–µ—Ç: $${(amount - currentBalance).toFixed(2)}`);
            return;
        }
    } catch (error) {
        console.error('Error checking balance:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
    }

    try {
        const data = await apiCall('/transactions/withdrawal', {
            method: 'POST',
            body: JSON.stringify({
                amount,
                currency,
                cryptoAddress: cryptoAddress || undefined,
                cryptoType: currency === 'CRYPTO' ? 'ETH' : undefined
            })
        });
        
        showResponse(data);
        alert('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!');
    } catch (error) {
        showResponse({ error: error.message });
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        if (error.message.includes('Insufficient balance')) {
            alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤.');
        } else {
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }
}

async function getTransactions() {
    try {
        const data = await apiCall('/transactions');
        showResponse(data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const statsDiv = document.getElementById('transactions-stats');
        const transactions = data.data.transactions;
        const total = data.data.pagination.total;
        
        const stats = {
            total: total,
            deposits: transactions.filter(t => t.type === 'deposit').length,
            withdrawals: transactions.filter(t => t.type === 'withdrawal').length,
            purchases: transactions.filter(t => t.type === 'purchase').length,
            sales: transactions.filter(t => t.type === 'sale').length
        };
        
        statsDiv.innerHTML = `
            <strong>–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</strong> ${stats.total}<br>
            <strong>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> ${stats.deposits}<br>
            <strong>–í—ã–≤–æ–¥—ã:</strong> ${stats.withdrawals}<br>
            <strong>–ü–æ–∫—É–ø–∫–∏:</strong> ${stats.purchases}<br>
            <strong>–ü—Ä–æ–¥–∞–∂–∏:</strong> ${stats.sales}
        `;
        statsDiv.className = 'status success';
    } catch (error) {
        showResponse({ error: error.message });
    }
}

async function getBalance() {
    try {
        const data = await apiCall('/transactions/balance');
        showResponse(data);
        updateBalance(data.data.balance);
    } catch (error) {
        showResponse({ error: error.message });
    }
}

async function quickDeposit() {
    try {
        const data = await apiCall('/transactions/deposit', {
            method: 'POST',
            body: JSON.stringify({
                amount: 10,
                currency: 'USD'
            })
        });
        
        showResponse(data);
        alert('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ $10!');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        await getBalance();
    } catch (error) {
        showResponse({ error: error.message });
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
async function loadTransactions() {
    try {
        const data = await apiCall('/transactions?limit=20');
        showResponse(data);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        displayTransactions(data.data.transactions);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateTransactionsStats(data.data.transactions, data.data.pagination.total);
    } catch (error) {
        showResponse({ error: error.message });
    }
}

function displayTransactions(transactions) {
    const container = document.getElementById('transactions-list');
    
    if (!container) {
        console.error('Container transactions-list not found');
        return;
    }
    
    if (!transactions || transactions.length === 0) {
        container.innerHTML = '<div class="status info">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
        return;
    }
    
    const transactionsHtml = transactions.map(transaction => {
        const date = new Date(transaction.createdAt).toLocaleString('ru-RU');
        const amount = transaction.amount.toFixed(2);
        const isPositive = transaction.type === 'deposit' || transaction.type === 'referral';
        
        return `
            <div class="transaction-card" data-transaction-id="${transaction._id}">
                <div class="transaction-header">
                    <span class="transaction-type ${transaction.type}">${getTransactionTypeLabel(transaction.type)}</span>
                    <span class="transaction-status ${transaction.status}">${getTransactionStatusLabel(transaction.status)}</span>
                </div>
                <div class="transaction-amount ${isPositive ? 'positive' : 'negative'}">
                    ${isPositive ? '+' : '-'}$${amount}
                </div>
                <div class="transaction-details">
                    <strong>ID:</strong> ${transaction._id}<br>
                    <strong>–î–∞—Ç–∞:</strong> ${date}<br>
                    <strong>–í–∞–ª—é—Ç–∞:</strong> ${transaction.currency}<br>
                    <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${transaction.description}
                    ${transaction.tradeId ? `<br><strong>–¢—Ä–µ–π–¥ ID:</strong> <a href="#" onclick="showTradeDetails('${transaction.tradeId._id || transaction.tradeId}')" style="color: #007bff; text-decoration: underline;">${transaction.tradeId._id || transaction.tradeId}</a>` : ''}
                </div>
                ${transaction.status === 'pending' ? `
                    <div class="transaction-actions">
                        <button class="btn btn-success btn-sm complete-btn" data-transaction-id="${transaction._id}">
                            ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å
                        </button>
                        <button class="btn btn-danger btn-sm cancel-btn" data-transaction-id="${transaction._id}">
                            ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
                        </button>
                    </div>
                ` : ''}
            </div>
        `;
    }).join('');
    
    container.innerHTML = transactionsHtml;
}

function getTransactionTypeLabel(type) {
    const labels = {
        'deposit': '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
        'withdrawal': '–í—ã–≤–æ–¥',
        'purchase': '–ü–æ–∫—É–ø–∫–∞',
        'sale': '–ü—Ä–æ–¥–∞–∂–∞',
        'referral': '–†–µ—Ñ–µ—Ä–∞–ª'
    };
    return labels[type] || type;
}

function getTransactionStatusLabel(status) {
    const labels = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞',
        'failed': '–û—à–∏–±–∫–∞'
    };
    return labels[status] || status;
}

function updateTransactionsStats(transactions, total) {
    const statsDiv = document.getElementById('transactions-stats');
    
    const stats = {
        total: total,
        deposits: transactions.filter(t => t.type === 'deposit').length,
        withdrawals: transactions.filter(t => t.type === 'withdrawal').length,
        purchases: transactions.filter(t => t.type === 'purchase').length,
        sales: transactions.filter(t => t.type === 'sale').length,
        pending: transactions.filter(t => t.status === 'pending').length,
        completed: transactions.filter(t => t.status === 'completed').length
    };
    
    statsDiv.innerHTML = `
        <strong>–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</strong> ${stats.total}<br>
        <strong>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> ${stats.deposits}<br>
        <strong>–í—ã–≤–æ–¥—ã:</strong> ${stats.withdrawals}<br>
        <strong>–ü–æ–∫—É–ø–∫–∏:</strong> ${stats.purchases}<br>
        <strong>–ü—Ä–æ–¥–∞–∂–∏:</strong> ${stats.sales}<br>
        <strong>–û–∂–∏–¥–∞—é—Ç:</strong> ${stats.pending}<br>
        <strong>–ó–∞–≤–µ—Ä—à–µ–Ω—ã:</strong> ${stats.completed}
    `;
    statsDiv.className = 'status success';
}

async function completeTransaction(transactionId) {
    console.log('üîß completeTransaction called with ID:', transactionId);
    
    if (!transactionId) {
        transactionId = document.getElementById('transaction-id').value;
        console.log('üîß Using transaction ID from input:', transactionId);
    }
    
    if (!transactionId) {
        alert('–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        return;
    }
    
    try {
        console.log('üîß Making API call to complete transaction:', transactionId);
        const data = await apiCall(`/transactions/${transactionId}/complete`, {
            method: 'PUT'
        });
        
        showResponse(data);
        alert('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await loadTransactions();
        await getBalance();
    } catch (error) {
        console.error('‚ùå Error completing transaction:', error);
        showResponse({ error: error.message });
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

async function cancelTransaction(transactionId) {
    console.log('üîß cancelTransaction called with ID:', transactionId);
    
    if (!transactionId) {
        transactionId = document.getElementById('transaction-id').value;
        console.log('üîß Using transaction ID from input:', transactionId);
    }
    
    if (!transactionId) {
        alert('–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        return;
    }
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?')) {
        return;
    }
    
    try {
        console.log('üîß Making API call to cancel transaction:', transactionId);
        const data = await apiCall(`/transactions/${transactionId}/cancel`, {
            method: 'PUT'
        });
        
        showResponse(data);
        alert('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await loadTransactions();
        await getBalance();
    } catch (error) {
        console.error('‚ùå Error cancelling transaction:', error);
        showResponse({ error: error.message });
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

async function cancelTrade(tradeId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–π–¥?')) {
        return;
    }
    
    try {
        const data = await apiCall(`/trades/${tradeId}/cancel`, {
            method: 'PUT'
        });
        
        showResponse(data);
        alert('‚ùå –¢—Ä–µ–π–¥ –æ—Ç–º–µ–Ω–µ–Ω!');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await getTrades();
        await loadTradesManagement();
    } catch (error) {
        showResponse({ error: error.message });
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–π–¥–∞
        if (error.message.includes('Trade cannot be cancelled')) {
            alert('‚ùå –¢—Ä–µ–π–¥ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n–¢–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–µ–π–¥—ã –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å. –≠—Ç–æ—Ç —Ç—Ä–µ–π–¥ —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.');
        } else if (error.message.includes('Trade not found')) {
            alert('‚ùå –¢—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–¢—Ä–µ–π–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ –æ—Ç–º–µ–Ω—ã.');
        } else {
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞–º–∏
async function loadTradesManagement() {
    try {
        const data = await apiCall('/trades?limit=20');
        showResponse(data);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–µ–π–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        displayTradesManagement(data.data.trades);
    } catch (error) {
        showResponse({ error: error.message });
    }
}

function displayTradesManagement(trades) {
    const container = document.getElementById('trades-management-list');
    
    if (!container) {
        console.error('Container trades-management-list not found');
        return;
    }
    
    if (!trades || trades.length === 0) {
        container.innerHTML = '<div class="status info">–¢—Ä–µ–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
        return;
    }
    
    const tradesHtml = trades.map(trade => {
        const date = new Date(trade.createdAt).toLocaleString('ru-RU');
        const amount = trade.totalAmount.toFixed(2);
        const itemsCount = trade.items ? trade.items.length : 0;
        const typeLabel = trade.type === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const itemsList = trade.items.map(item => `
            <div class="trade-item">
                <span>${escapeHtml(item.itemName)}</span>
                <span>$${item.price.toFixed(2)}</span>
            </div>
        `).join('');
        
        return `
            <div class="transaction-card" data-trade-id="${trade._id}">
                <div class="transaction-header">
                    <span class="transaction-type ${trade.type}">${typeLabel}</span>
                    <span class="transaction-status ${trade.status}">${getTradeStatusLabel(trade.status)}</span>
                </div>
                <div class="transaction-amount">
                    $${amount}
                </div>
                <div class="transaction-details">
                    <strong>ID:</strong> ${trade._id}<br>
                    <strong>–î–∞—Ç–∞:</strong> ${date}<br>
                    <strong>–ü—Ä–µ–¥–º–µ—Ç–æ–≤:</strong> ${itemsCount}<br>
                    <strong>–ë–æ—Ç ID:</strong> ${trade.botId || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
                </div>
                <div class="trade-details">
                    <strong>–ü—Ä–µ–¥–º–µ—Ç—ã –≤ —Ç—Ä–µ–π–¥–µ:</strong>
                    <div class="trade-items-list">
                        ${itemsList}
                    </div>
                </div>
                ${trade.status === 'pending' ? `
                    <div class="trade-actions">
                        <button class="btn btn-success btn-sm process-trade-btn" data-trade-id="${trade._id}">
                            üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫—É
                        </button>
                        <button class="btn btn-success btn-sm complete-trade-btn" data-trade-id="${trade._id}">
                            ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å
                        </button>
                        <button class="btn btn-danger btn-sm cancel-trade-btn" data-trade-id="${trade._id}">
                            ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
                        </button>
                    </div>
                ` : trade.status === 'processing' ? `
                    <div class="trade-actions">
                        <button class="btn btn-success btn-sm complete-trade-btn" data-trade-id="${trade._id}">
                            ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å
                        </button>
                        <button class="btn btn-danger btn-sm cancel-trade-btn" data-trade-id="${trade._id}">
                            ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
                        </button>
                    </div>
                ` : ''}
            </div>
        `;
    }).join('');
    
    container.innerHTML = tradesHtml;
}

async function processTrade(tradeId) {
    if (!confirm('–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–π–¥ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É?')) {
        return;
    }
    
    try {
        const data = await apiCall(`/trades/${tradeId}/process`, {
            method: 'PUT'
        });
        
        showResponse(data);
        alert('üîÑ –¢—Ä–µ–π–¥ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await loadTradesManagement();
        await getTrades();
    } catch (error) {
        showResponse({ error: error.message });
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–π–¥–∞
        if (error.message.includes('Trade cannot be processed')) {
            alert('‚ùå –¢—Ä–µ–π–¥ –Ω–µ–ª—å–∑—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å!\n\n–¢–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–µ–π–¥—ã –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –≠—Ç–æ—Ç —Ç—Ä–µ–π–¥ —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.');
        } else if (error.message.includes('Trade not found')) {
            alert('‚ùå –¢—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–¢—Ä–µ–π–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
        } else {
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }
}

async function completeTradeManagement(tradeId) {
    if (!confirm('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–π–¥? –≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫:\n- –°–ø–∏—Å–∞–Ω–∏—é/–Ω–∞—á–∏—Å–ª–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞\n- –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n- –°–æ–∑–¥–∞–Ω–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')) {
        return;
    }
    
    try {
        const data = await apiCall(`/trades/${tradeId}/complete`, {
            method: 'PUT'
        });
        
        showResponse(data);
        alert('‚úÖ –¢—Ä–µ–π–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ë–∞–ª–∞–Ω—Å –∏ –ø—Ä–µ–¥–º–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await loadTradesManagement();
        await getTrades();
        await getBalance();
    } catch (error) {
        showResponse({ error: error.message });
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞
        if (error.message.includes('Trade already completed')) {
            alert('‚ùå –¢—Ä–µ–π–¥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–≠—Ç–æ—Ç —Ç—Ä–µ–π–¥ —É–∂–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ.');
        } else if (error.message.includes('Trade not found')) {
            alert('‚ùå –¢—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–¢—Ä–µ–π–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
        } else if (error.message.includes('Insufficient balance')) {
            try {
                const errorData = JSON.parse(error.message);
                if (errorData.details) {
                    alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞!\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è: $${errorData.details.requiredAmount}\n–î–æ—Å—Ç—É–ø–Ω–æ: $${errorData.details.currentBalance}\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: $${errorData.details.shortfall}`);
                } else {
                    alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.');
                }
            } catch {
                alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.');
            }
        } else {
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }
}

async function cancelTradeManagement(tradeId) {
    if (!confirm('–û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–π–¥? –≠—Ç–æ –≤–µ—Ä–Ω–µ—Ç –≤—Å–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.')) {
        return;
    }
    
    try {
        const data = await apiCall(`/trades/${tradeId}/cancel`, {
            method: 'PUT'
        });
        
        showResponse(data);
        alert('‚ùå –¢—Ä–µ–π–¥ –æ—Ç–º–µ–Ω–µ–Ω!');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await loadTradesManagement();
        await getTrades();
    } catch (error) {
        showResponse({ error: error.message });
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–π–¥–∞
        if (error.message.includes('Trade cannot be cancelled')) {
            alert('‚ùå –¢—Ä–µ–π–¥ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n–¢–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–µ–π–¥—ã –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å. –≠—Ç–æ—Ç —Ç—Ä–µ–π–¥ —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.');
        } else if (error.message.includes('Trade not found')) {
            alert('‚ùå –¢—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–¢—Ä–µ–π–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ –æ—Ç–º–µ–Ω—ã.');
        } else {
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
let selectedItems = [];
let availableItems = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–π–¥–∞
async function showTradeDetails(tradeId) {
    try {
        const data = await apiCall(`/trades/${tradeId}`);
        if (data.success && data.data.trade) {
            const trade = data.data.trade;
            const itemsList = trade.items.map(item => 
                `‚Ä¢ ${item.itemName} - $${item.price.toFixed(2)}`
            ).join('\n');
            
            alert(`üìã –î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–π–¥–∞ ${tradeId}\n\n` +
                  `–¢–∏–ø: ${trade.type === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞'}\n` +
                  `–°—Ç–∞—Ç—É—Å: ${getTradeStatusLabel(trade.status)}\n` +
                  `–û–±—â–∞—è —Å—É–º–º–∞: $${trade.totalAmount.toFixed(2)}\n` +
                  `–î–∞—Ç–∞: ${new Date(trade.createdAt).toLocaleString('ru-RU')}\n\n` +
                  `–ü—Ä–µ–¥–º–µ—Ç—ã:\n${itemsList}`);
        } else {
            alert('–¢—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–π–¥–∞: ' + error.message);
    }
}

// –¢—Ä–µ–π–¥—ã
async function loadItems() {
    try {
        console.log('üîç Loading items from bot inventory...');
        const data = await apiCall('/inventory?limit=50');
        console.log('üì¶ Bot inventory response:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
        availableItems = data.data.items || data.data.inventory || [];
        console.log('üì¶ Available items count:', availableItems.length);
        
        if (availableItems.length === 0) {
            console.log('‚ö†Ô∏è No items found in bot inventory');
            showResponse({ 
                message: 'No items found in bot inventory. This might be because:',
                reasons: [
                    'No bots have been set up yet',
                    'No items have been added to bot inventories',
                    'All items are marked as unavailable'
                ],
                suggestion: 'Try adding some test items to bot inventories first'
            });
        }
        
        displayAvailableItems(availableItems);
    } catch (error) {
        console.error('‚ùå Error loading items:', error);
        showResponse({ error: error.message });
    }
}

function displayAvailableItems(items) {
    const container = document.getElementById('available-items');
    
    if (!container) {
        console.error('Container available-items not found');
        return;
    }
    
    if (!items || items.length === 0) {
        container.innerHTML = '<div class="status info">–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    const itemsHtml = items.map(item => {
        const isSelected = selectedItems.some(selected => selected._id === item._id || selected.classid === item.classid);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        const itemId = item._id || item.classid;
        const itemName = item.name || item.displayName || item.market_hash_name || 'Unknown Item';
        const imageUrl = item.imageUrl || item.icon_url || `https://community.fastly.steamstatic.com/economy/image/${item.icon_url}` || 'https://via.placeholder.com/60x60?text=No+Image';
        const price = item.price || item.ourPrice || item.estimatedPrice || 0;
        const rarity = item.rarity || 'Common';
        const quantity = item.quantity || 1;
        
        return `
            <div class="item-card ${isSelected ? 'selected' : ''}" data-item-id="${itemId}">
                <img src="${imageUrl}" alt="${itemName}" class="item-image" onerror="this.src='https://via.placeholder.com/60x60?text=Error'">
                <div class="item-info">
                    <div class="item-name">${escapeHtml(itemName)}</div>
                    <div class="item-price">$${price.toFixed(2)}</div>
                    <div class="item-rarity">${rarity} (${quantity} —à—Ç.)</div>
                </div>
            </div>
        `;
    }).join('');
    
    container.innerHTML = itemsHtml;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
    container.querySelectorAll('.item-card').forEach(card => {
        card.addEventListener('click', function() {
            const itemId = this.getAttribute('data-item-id');
            toggleItemSelection(itemId);
        });
    });
}

function toggleItemSelection(itemId) {
    const item = availableItems.find(item => (item._id === itemId) || (item.classid === itemId));
    if (!item) {
        console.error('‚ùå Item not found:', itemId);
        return;
    }
    
    const isSelected = selectedItems.some(selected => 
        (selected._id === itemId) || (selected.classid === itemId) ||
        (selected._id === item._id) || (selected.classid === item.classid)
    );
    
    if (isSelected) {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        selectedItems = selectedItems.filter(selected => 
            (selected._id !== itemId) && (selected.classid !== itemId) &&
            (selected._id !== item._id) && (selected.classid !== item.classid)
        );
        console.log('üóëÔ∏è Removed item from selection:', itemId);
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        selectedItems.push(item);
        console.log('‚úÖ Added item to selection:', itemId);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    displayAvailableItems(availableItems);
    displaySelectedItems();
    updateTradeSummary();
}

function displaySelectedItems() {
    const container = document.getElementById('selected-items-list');
    const tradeContainer = document.getElementById('trade-items-display');
    
    if (!container || !tradeContainer) {
        console.error('Selected items containers not found');
        return;
    }
    
    if (selectedItems.length === 0) {
        container.innerHTML = '<div class="status info">–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</div>';
        tradeContainer.innerHTML = '<div class="status info">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å–ª–µ–≤–∞</div>';
        return;
    }
    
    const itemsHtml = selectedItems.map(item => {
        const itemId = item._id || item.classid;
        const itemName = item.name || item.displayName || item.market_hash_name || 'Unknown Item';
        const imageUrl = item.imageUrl || item.icon_url || `https://community.fastly.steamstatic.com/economy/image/${item.icon_url}` || 'https://via.placeholder.com/40x40?text=No+Image';
        const price = item.price || item.ourPrice || item.estimatedPrice || 0;
        
        return `
            <div class="selected-item">
                <div class="selected-item-info">
                    <img src="${imageUrl}" 
                         alt="${itemName}" 
                         class="item-image" 
                         style="width: 40px; height: 40px;"
                         onerror="this.src='https://via.placeholder.com/40x40?text=Error'">
                    <div>
                        <div class="item-name">${escapeHtml(itemName)}</div>
                        <div class="item-price">$${price.toFixed(2)}</div>
                    </div>
                </div>
                <button class="selected-item-remove" data-item-id="${itemId}">‚úï</button>
            </div>
        `;
    }).join('');
    
    container.innerHTML = itemsHtml;
    tradeContainer.innerHTML = itemsHtml;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
    container.querySelectorAll('.selected-item-remove').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.stopPropagation();
            const itemId = this.getAttribute('data-item-id');
            console.log('üîß Remove item button clicked, item ID:', itemId);
            toggleItemSelection(itemId);
        });
    });
    
    tradeContainer.querySelectorAll('.selected-item-remove').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.stopPropagation();
            const itemId = this.getAttribute('data-item-id');
            console.log('üîß Remove item button clicked, item ID:', itemId);
            toggleItemSelection(itemId);
        });
    });
}

function updateTradeSummary() {
    const summaryDiv = document.getElementById('trade-summary');
    const totalAmountSpan = document.getElementById('total-amount');
    const createAmountInput = document.getElementById('create-trade-amount');
    
    if (!summaryDiv || !totalAmountSpan || !createAmountInput) {
        console.error('Trade summary elements not found');
        return;
    }
    
    if (selectedItems.length === 0) {
        summaryDiv.style.display = 'none';
        createAmountInput.value = '';
        return;
    }
    
    const totalAmount = selectedItems.reduce((sum, item) => {
        return sum + (item.price || item.ourPrice || item.estimatedPrice || 0);
    }, 0);
    
    totalAmountSpan.textContent = totalAmount.toFixed(2);
    createAmountInput.value = totalAmount.toFixed(2);
    summaryDiv.style.display = 'block';
}

async function calculateTrade() {
    if (selectedItems.length === 0) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞');
        return;
    }

    const type = document.getElementById('trade-type').value;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
    const items = selectedItems.map(item => ({
        itemId: item._id || item.classid,
        itemName: item.name || item.displayName || item.market_hash_name,
        estimatedPrice: item.price || item.ourPrice || item.estimatedPrice || 0,
        steamId: item.steamId || item.classid
    }));

    try {
        const data = await apiCall('/trades/calculate', {
            method: 'POST',
            body: JSON.stringify({ type, items })
        });
        
        showResponse(data);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
        const result = data.data;
        alert(`–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n–¢–∏–ø: ${result.type === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞'}\n–û–±—â–∞—è —Å—É–º–º–∞: $${result.totalAmount.toFixed(2)}\n–ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${result.items.length}`);
    } catch (error) {
        showResponse({ error: error.message });
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

async function createTrade() {
    if (selectedItems.length === 0) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Ç—Ä–µ–π–¥–∞');
        return;
    }

    const type = document.getElementById('create-trade-type').value;
    const totalAmount = parseFloat(document.getElementById('create-trade-amount').value);

    if (!totalAmount || totalAmount <= 0) {
        alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞');
        return;
    }

    try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
        const items = selectedItems.map(item => ({
            itemId: item._id || item.classid,
            itemName: item.name || item.displayName || item.market_hash_name,
            price: item.price || item.ourPrice || item.estimatedPrice || 0,
            steamId: item.steamId || item.classid
        }));

        const data = await apiCall('/trades', {
            method: 'POST',
            body: JSON.stringify({ type, items, totalAmount })
        });
        
        showResponse(data);
        alert('–¢—Ä–µ–π–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
        
        // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–π–¥–∞
        selectedItems = [];
        displayAvailableItems(availableItems);
        displaySelectedItems();
        updateTradeSummary();
    } catch (error) {
        showResponse({ error: error.message });
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        if (error.message.includes('Insufficient balance')) {
            try {
                const errorData = JSON.parse(error.message);
                if (errorData.details) {
                    alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è: $${errorData.details.requiredAmount}\n–î–æ—Å—Ç—É–ø–Ω–æ: $${errorData.details.currentBalance}\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: $${errorData.details.shortfall}\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`);
                } else {
                    alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–π–¥–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.');
                }
            } catch {
                alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–π–¥–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.');
            }
        } else {
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }
}

async function getTrades() {
    try {
        const data = await apiCall('/trades');
        showResponse(data);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–µ–π–¥—ã –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        displayTrades(data.data.trades);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateTradesStats(data.data.trades, data.data.pagination.total);
    } catch (error) {
        showResponse({ error: error.message });
    }
}

function displayTrades(trades) {
    const container = document.getElementById('trades-stats');
    
    if (!container) {
        console.error('Container trades-stats not found');
        return;
    }
    
    if (!trades || trades.length === 0) {
        container.innerHTML = '<div class="status info">–¢—Ä–µ–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
        return;
    }
    
    const tradesHtml = trades.map(trade => {
        const date = new Date(trade.createdAt).toLocaleString('ru-RU');
        const amount = trade.totalAmount.toFixed(2);
        const itemsCount = trade.items ? trade.items.length : 0;
        const typeLabel = trade.type === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const itemsList = trade.items.map(item => `
            <div class="trade-item">
                <span>${escapeHtml(item.itemName)}</span>
                <span>$${item.price.toFixed(2)}</span>
            </div>
        `).join('');
        
        return `
            <div class="transaction-card" data-trade-id="${trade._id}">
                <div class="transaction-header">
                    <span class="transaction-type ${trade.type}">${typeLabel}</span>
                    <span class="transaction-status ${trade.status}">${getTradeStatusLabel(trade.status)}</span>
                </div>
                <div class="transaction-amount">
                    $${amount}
                </div>
                <div class="transaction-details">
                    <strong>ID:</strong> ${trade._id}<br>
                    <strong>–î–∞—Ç–∞:</strong> ${date}<br>
                    <strong>–ü—Ä–µ–¥–º–µ—Ç–æ–≤:</strong> ${itemsCount}<br>
                    <strong>–ë–æ—Ç ID:</strong> ${trade.botId || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
                </div>
                <div class="trade-details">
                    <strong>–ü—Ä–µ–¥–º–µ—Ç—ã –≤ —Ç—Ä–µ–π–¥–µ:</strong>
                    <div class="trade-items-list">
                        ${itemsList}
                    </div>
                </div>
                ${trade.status === 'pending' ? `
                    <div class="transaction-actions">
                        <button class="btn btn-success btn-sm cancel-trade-btn" data-trade-id="${trade._id}">
                            ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–π–¥
                        </button>
                    </div>
                ` : ''}
            </div>
        `;
    }).join('');
    
    container.innerHTML = tradesHtml;
}

function getTradeStatusLabel(status) {
    const labels = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
        'failed': '–û—à–∏–±–∫–∞'
    };
    return labels[status] || status;
}

function updateTradesStats(trades, total) {
    const statsDiv = document.getElementById('trades-stats');
    
    const stats = {
        total: total,
        pending: trades.filter(t => t.status === 'pending').length,
        processing: trades.filter(t => t.status === 'processing').length,
        completed: trades.filter(t => t.status === 'completed').length,
        buy: trades.filter(t => t.type === 'buy').length,
        sell: trades.filter(t => t.type === 'sell').length
    };
    
    statsDiv.innerHTML = `
        <strong>–í—Å–µ–≥–æ —Ç—Ä–µ–π–¥–æ–≤:</strong> ${stats.total}<br>
        <strong>–û–∂–∏–¥–∞—é—Ç:</strong> ${stats.pending}<br>
        <strong>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ:</strong> ${stats.processing}<br>
        <strong>–ó–∞–≤–µ—Ä—à–µ–Ω—ã:</strong> ${stats.completed}<br>
        <strong>–ü–æ–∫—É–ø–∫–∏:</strong> ${stats.buy}<br>
        <strong>–ü—Ä–æ–¥–∞–∂–∏:</strong> ${stats.sell}
    `;
    statsDiv.className = 'status success';
}

// –ë–æ—Ç—ã
async function getBots() {
    try {
        const data = await apiCall('/bots');
        showResponse(data);
    } catch (error) {
        showResponse({ error: error.message });
    }
}

async function getBotInventory() {
    const botId = document.getElementById('bot-id').value;
    
    if (!botId) {
        alert('–í–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞');
        return;
    }

    try {
        const data = await apiCall(`/bots/${botId}/inventory`);
        showResponse(data);
    } catch (error) {
        showResponse({ error: error.message });
    }
}

async function createSteamTrade() {
    const tradeId = document.getElementById('steam-trade-id').value;
    const botId = document.getElementById('steam-bot-id').value;
    
    if (!tradeId || !botId) {
        alert('–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–π–¥–∞ –∏ ID –±–æ—Ç–∞');
        return;
    }

    try {
        const data = await apiCall('/bots/trade', {
            method: 'POST',
            body: JSON.stringify({ tradeId, botId })
        });
        
        showResponse(data);
        alert('Steam —Ç—Ä–µ–π–¥ —Å–æ–∑–¥–∞–Ω!');
    } catch (error) {
        showResponse({ error: error.message });
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

async function checkTradeStatus() {
    const tradeId = document.getElementById('steam-trade-id').value;
    
    if (!tradeId) {
        alert('–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–π–¥–∞');
        return;
    }

    try {
        const data = await apiCall(`/bots/trade/${tradeId}/status`);
        showResponse(data);
    } catch (error) {
        showResponse({ error: error.message });
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function autoLoadData() {
    console.log('üöÄ Starting automatic data loading...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const isAuthenticated = await checkAuthStatus();
        
        if (isAuthenticated) {
            console.log('‚úÖ User is authenticated, loading data...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            const loadPromises = [
                getBalance().catch(err => console.log('‚ö†Ô∏è Failed to load balance:', err.message)),
                getTransactions().catch(err => console.log('‚ö†Ô∏è Failed to load transactions:', err.message)),
                getTrades().catch(err => console.log('‚ö†Ô∏è Failed to load trades:', err.message)),
                getBots().catch(err => console.log('‚ö†Ô∏è Failed to load bots:', err.message)),
                loadItems().catch(err => console.log('‚ö†Ô∏è Failed to load items:', err.message))
            ];
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
            await Promise.allSettled(loadPromises);
            
            console.log('‚úÖ Automatic data loading completed');
        } else {
            console.log('‚ö†Ô∏è User not authenticated, skipping data loading');
        }
    } catch (error) {
        console.error('‚ùå Error during automatic data loading:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéÆ CS2 Trading Test Page loading...');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–∑ URL
    const authProcessed = handleAuthFromUrl();
    
    // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–∑ URL, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    if (!authProcessed) {
        const token = getAuthToken();
        if (token) {
            console.log('üîç Token found in localStorage, checking auth status...');
            checkAuthStatus();
        } else {
            console.log('‚ùå No token found, showing login prompt');
            updateAuthStatus('warning', '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Steam –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π.');
        }
    } else {
        console.log('‚úÖ Auth processed from URL, skipping localStorage check');
    }
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫ –∫–Ω–æ–ø–∫–∞–º
    document.getElementById('login-btn').addEventListener('click', loginWithSteam);
    document.getElementById('logout-btn').addEventListener('click', logout);
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    document.getElementById('create-deposit-btn').addEventListener('click', createDeposit);
    document.getElementById('create-withdrawal-btn').addEventListener('click', createWithdrawal);
    document.getElementById('get-transactions-btn').addEventListener('click', getTransactions);
    document.getElementById('get-balance-btn').addEventListener('click', getBalance);
    document.getElementById('quick-deposit-btn').addEventListener('click', quickDeposit);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    document.getElementById('load-transactions-btn').addEventListener('click', loadTransactions);
    document.getElementById('complete-transaction-btn').addEventListener('click', () => completeTransaction());
    document.getElementById('cancel-transaction-btn').addEventListener('click', () => cancelTransaction());
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞–º–∏
    document.getElementById('load-trades-management-btn').addEventListener('click', loadTradesManagement);
    document.getElementById('complete-trade-btn').addEventListener('click', () => completeTradeManagement());
    document.getElementById('process-trade-btn').addEventListener('click', () => processTrade());
    document.getElementById('cancel-trade-btn').addEventListener('click', () => cancelTradeManagement());
    
    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    document.addEventListener('click', function(e) {
        console.log('üîç Click event on:', e.target.className);
        
        // –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if (e.target.classList.contains('complete-btn')) {
            const transactionId = e.target.getAttribute('data-transaction-id');
            console.log('üîß Complete button clicked, transaction ID:', transactionId);
            completeTransaction(transactionId);
        }
        
        // –ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if (e.target.classList.contains('cancel-btn')) {
            const transactionId = e.target.getAttribute('data-transaction-id');
            console.log('üîß Cancel button clicked, transaction ID:', transactionId);
            cancelTransaction(transactionId);
        }
        
        // –ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–π–¥–æ–≤
        if (e.target.classList.contains('cancel-trade-btn')) {
            const tradeId = e.target.getAttribute('data-trade-id');
            console.log('üîß Cancel trade button clicked, trade ID:', tradeId);
            cancelTrade(tradeId);
        }
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞–º–∏
        if (e.target.classList.contains('process-trade-btn')) {
            const tradeId = e.target.getAttribute('data-trade-id');
            console.log('üîß Process trade button clicked, trade ID:', tradeId);
            processTrade(tradeId);
        }
        
        if (e.target.classList.contains('complete-trade-btn')) {
            const tradeId = e.target.getAttribute('data-trade-id');
            console.log('üîß Complete trade button clicked, trade ID:', tradeId);
            completeTradeManagement(tradeId);
        }
        
        if (e.target.classList.contains('cancel-trade-btn')) {
            const tradeId = e.target.getAttribute('data-trade-id');
            console.log('üîß Cancel trade management button clicked, trade ID:', tradeId);
            cancelTradeManagement(tradeId);
        }
        
        // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        if (e.target.classList.contains('selected-item-remove')) {
            e.stopPropagation();
            const itemId = e.target.getAttribute('data-item-id');
            console.log('üîß Remove item button clicked, item ID:', itemId);
            toggleItemSelection(itemId);
        }
    });
    
    // –¢—Ä–µ–π–¥—ã
    document.getElementById('load-items-btn').addEventListener('click', loadItems);
    document.getElementById('calculate-trade-btn').addEventListener('click', calculateTrade);
    document.getElementById('create-trade-btn').addEventListener('click', createTrade);
    document.getElementById('get-trades-btn').addEventListener('click', getTrades);
    
    // –ë–æ—Ç—ã
    document.getElementById('get-bots-btn').addEventListener('click', getBots);
    document.getElementById('get-bot-inventory-btn').addEventListener('click', getBotInventory);
    document.getElementById('create-steam-trade-btn').addEventListener('click', createSteamTrade);
    document.getElementById('check-trade-status-btn').addEventListener('click', checkTradeStatus);
    
    console.log('üéÆ CS2 Trading Test Page loaded!');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
        autoLoadData();
    }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
});
